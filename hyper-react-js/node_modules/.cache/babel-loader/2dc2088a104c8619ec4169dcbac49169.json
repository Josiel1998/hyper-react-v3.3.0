{"ast":null,"code":"import _objectWithoutProperties from\"/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";var _excluded=[\"component\",\"roles\"];import{Navigate,useLocation}from'react-router-dom';import{APICore}from'../helpers/api/apiCore';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */var PrivateRoute=function PrivateRoute(_ref){var RouteComponent=_ref.component,roles=_ref.roles,rest=_objectWithoutProperties(_ref,_excluded);var location=useLocation();var api=new APICore();var loggedInUser=api.getLoggedInUser();/**\n     * not logged in so redirect to login page with the return url\n     */if(api.isUserAuthenticated()===false){return/*#__PURE__*/_jsx(Navigate,{to:'/account/login',state:{from:location},replace:true});}// check if route is restricted by role\nif(roles&&roles.indexOf(loggedInUser.role)===-1){// role not authorised so redirect to home page\nreturn/*#__PURE__*/_jsx(Navigate,{to:{pathname:'/'}});}return/*#__PURE__*/_jsx(RouteComponent,{});};export default PrivateRoute;","map":{"version":3,"names":["Navigate","useLocation","APICore","PrivateRoute","RouteComponent","component","roles","rest","location","api","loggedInUser","getLoggedInUser","isUserAuthenticated","from","indexOf","role","pathname"],"sources":["/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/src/routes/PrivateRoute.js"],"sourcesContent":["import { Navigate, useLocation } from 'react-router-dom';\nimport { APICore } from '../helpers/api/apiCore';\n\ntype PrivateRouteProps = {\n    component: React.ComponentType,\n    roles?: string,\n};\n\n/**\n * Private Route forces the authorization before the route can be accessed\n * @param {*} param0\n * @returns\n */\nconst PrivateRoute = ({ component: RouteComponent, roles, ...rest }: PrivateRouteProps) => {\n    let location = useLocation();\n    const api = new APICore();\n    const loggedInUser = api.getLoggedInUser();\n\n    /**\n     * not logged in so redirect to login page with the return url\n     */\n    if (api.isUserAuthenticated() === false) {\n        return <Navigate to={'/account/login'} state={{ from: location }} replace />;\n    }\n\n    // check if route is restricted by role\n    if (roles && roles.indexOf(loggedInUser.role) === -1) {\n        // role not authorised so redirect to home page\n        return <Navigate to={{ pathname: '/' }} />;\n    }\n\n    return <RouteComponent />;\n};\n\nexport default PrivateRoute;\n"],"mappings":"wNAAA,OAASA,QAAT,CAAmBC,WAAnB,KAAsC,kBAAtC,CACA,OAASC,OAAT,KAAwB,wBAAxB,C,2CAOA;AACA;AACA;AACA;AACA,GACA,GAAMC,aAAY,CAAG,QAAfA,aAAe,MAAsE,IAAxDC,eAAwD,MAAnEC,SAAmE,CAAxCC,KAAwC,MAAxCA,KAAwC,CAA9BC,IAA8B,0CACvF,GAAIC,SAAQ,CAAGP,WAAW,EAA1B,CACA,GAAMQ,IAAG,CAAG,GAAIP,QAAJ,EAAZ,CACA,GAAMQ,aAAY,CAAGD,GAAG,CAACE,eAAJ,EAArB,CAEA;AACJ;AACA,OACI,GAAIF,GAAG,CAACG,mBAAJ,KAA8B,KAAlC,CAAyC,CACrC,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,gBAAd,CAAgC,KAAK,CAAE,CAAEC,IAAI,CAAEL,QAAR,CAAvC,CAA2D,OAAO,KAAlE,EAAP,CACH,CAED;AACA,GAAIF,KAAK,EAAIA,KAAK,CAACQ,OAAN,CAAcJ,YAAY,CAACK,IAA3B,IAAqC,CAAC,CAAnD,CAAsD,CAClD;AACA,mBAAO,KAAC,QAAD,EAAU,EAAE,CAAE,CAAEC,QAAQ,CAAE,GAAZ,CAAd,EAAP,CACH,CAED,mBAAO,KAAC,cAAD,IAAP,CACH,CAnBD,CAqBA,cAAeb,aAAf"},"metadata":{},"sourceType":"module"}