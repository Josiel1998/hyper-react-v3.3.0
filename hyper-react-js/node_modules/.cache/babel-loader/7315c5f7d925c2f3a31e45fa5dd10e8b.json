{"ast":null,"code":"import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nconst TOKEN = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI';\nvar mock = new MockAdapter(axios, {\n  onNoMatch: 'passthrough'\n});\nexport function configureFakeBackend() {\n  let users = [{\n    id: 1,\n    username: 'test',\n    password: 'test',\n    firstName: 'Test',\n    lastName: 'User',\n    role: 'Admin',\n    token: TOKEN\n  }];\n  mock.onPost('/login/').reply(function (config) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // get parameters from post request\n        let params = JSON.parse(config.data); // find if any user matches login credentials\n\n        let filteredUsers = users.filter(user => {\n          return user.username === params.username && user.password === params.password;\n        });\n\n        if (filteredUsers.length) {\n          // if login details are valid return user details and fake jwt token\n          let user = filteredUsers[0];\n          resolve([200, user]);\n        } else {\n          // else return error\n          resolve([401, {\n            message: 'Username or password is incorrect'\n          }]);\n        }\n      }, 1000);\n    });\n  });\n  mock.onPost('/logout/').reply(function (config) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve([200, 'You have successfully logged out!']);\n      });\n    });\n  });\n  mock.onPost('/register/').reply(function (config) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // get parameters from post request\n        let params = JSON.parse(config.data); // add new users\n\n        let [firstName, lastName] = params.fullname.split(' ');\n        let newUser = {\n          id: users.length + 1,\n          username: firstName,\n          password: params.password,\n          firstName: firstName,\n          lastName: lastName,\n          role: 'Admin',\n          token: TOKEN\n        };\n        users.push({\n          newUser\n        });\n        resolve([200, newUser]);\n      }, 1000);\n    });\n  });\n  mock.onPost('/forget-password/').reply(function (config) {\n    return new Promise(function (resolve, reject) {\n      setTimeout(function () {\n        // get parameters from post request\n        let params = JSON.parse(config.data); // find if any user matches login credentials\n\n        let filteredUsers = users.filter(user => {\n          return user.username === params.username;\n        });\n\n        if (filteredUsers.length) {\n          // if login details are valid return user details and fake jwt token\n          let responseJson = {\n            message: \"We've sent you a link to reset password to your registered email.\"\n          };\n          resolve([200, responseJson]);\n        } else {\n          // else return error\n          resolve([401, {\n            message: 'Sorry, we could not find any registered user with entered username'\n          }]);\n        }\n      }, 1000);\n    });\n  });\n}","map":{"version":3,"names":["axios","MockAdapter","TOKEN","mock","onNoMatch","configureFakeBackend","users","id","username","password","firstName","lastName","role","token","onPost","reply","config","Promise","resolve","reject","setTimeout","params","JSON","parse","data","filteredUsers","filter","user","length","message","fullname","split","newUser","push","responseJson"],"sources":["/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/src/helpers/fake-backend.js"],"sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst TOKEN =\n    'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI';\n\nvar mock = new MockAdapter(axios, { onNoMatch: 'passthrough' });\n\nexport function configureFakeBackend() {\n    let users = [\n        {\n            id: 1,\n            username: 'test',\n            password: 'test',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'Admin',\n            token: TOKEN,\n        },\n    ];\n\n    mock.onPost('/login/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.username === params.username && user.password === params.password;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let user = filteredUsers[0];\n                    resolve([200, user]);\n                } else {\n                    // else return error\n                    resolve([401, { message: 'Username or password is incorrect' }]);\n                }\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/logout/').reply(function (config) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve([200, 'You have successfully logged out!']);\n            });\n        });\n    });\n\n    mock.onPost('/register/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // add new users\n                let [firstName, lastName] = params.fullname.split(' ');\n                let newUser = {\n                    id: users.length + 1,\n                    username: firstName,\n                    password: params.password,\n                    firstName: firstName,\n                    lastName: lastName,\n                    role: 'Admin',\n                    token: TOKEN,\n                };\n                users.push({ newUser });\n\n                resolve([200, newUser]);\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/forget-password/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.username === params.username;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let responseJson = {\n                        message: \"We've sent you a link to reset password to your registered email.\",\n                    };\n                    resolve([200, responseJson]);\n                } else {\n                    // else return error\n                    resolve([\n                        401,\n                        {\n                            message: 'Sorry, we could not find any registered user with entered username',\n                        },\n                    ]);\n                }\n            }, 1000);\n        });\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}