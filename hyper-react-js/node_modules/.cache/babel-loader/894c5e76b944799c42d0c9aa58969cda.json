{"ast":null,"code":"import _slicedToArray from\"/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import axios from'axios';import MockAdapter from'axios-mock-adapter';var TOKEN='eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI';var mock=new MockAdapter(axios,{onNoMatch:'passthrough'});export function configureFakeBackend(){var users=[{id:1,username:'test',password:'test',firstName:'Test',lastName:'User',role:'Admin',token:TOKEN}];mock.onPost('/login/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){// get parameters from post request\nvar params=JSON.parse(config.data);// find if any user matches login credentials\nvar filteredUsers=users.filter(function(user){return user.username===params.username&&user.password===params.password;});if(filteredUsers.length){// if login details are valid return user details and fake jwt token\nvar user=filteredUsers[0];resolve([200,user]);}else{// else return error\nresolve([401,{message:'Username or password is incorrect'}]);}},1000);});});mock.onPost('/logout/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){resolve([200,'You have successfully logged out!']);});});});mock.onPost('/register/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){// get parameters from post request\nvar params=JSON.parse(config.data);// add new users\nvar _params$fullname$spli=params.fullname.split(' '),_params$fullname$spli2=_slicedToArray(_params$fullname$spli,2),firstName=_params$fullname$spli2[0],lastName=_params$fullname$spli2[1];var newUser={id:users.length+1,username:firstName,password:params.password,firstName:firstName,lastName:lastName,role:'Admin',token:TOKEN};users.push({newUser:newUser});resolve([200,newUser]);},1000);});});mock.onPost('/forget-password/').reply(function(config){return new Promise(function(resolve,reject){setTimeout(function(){// get parameters from post request\nvar params=JSON.parse(config.data);// find if any user matches login credentials\nvar filteredUsers=users.filter(function(user){return user.username===params.username;});if(filteredUsers.length){// if login details are valid return user details and fake jwt token\nvar responseJson={message:\"We've sent you a link to reset password to your registered email.\"};resolve([200,responseJson]);}else{// else return error\nresolve([401,{message:'Sorry, we could not find any registered user with entered username'}]);}},1000);});});}","map":{"version":3,"names":["axios","MockAdapter","TOKEN","mock","onNoMatch","configureFakeBackend","users","id","username","password","firstName","lastName","role","token","onPost","reply","config","Promise","resolve","reject","setTimeout","params","JSON","parse","data","filteredUsers","filter","user","length","message","fullname","split","newUser","push","responseJson"],"sources":["/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/src/helpers/fake-backend.js"],"sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\n\nconst TOKEN =\n    'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJjb2RlcnRoZW1lcyIsImlhdCI6MTU4NzM1NjY0OSwiZXhwIjoxOTAyODg5NDQ5LCJhdWQiOiJjb2RlcnRoZW1lcy5jb20iLCJzdWIiOiJzdXBwb3J0QGNvZGVydGhlbWVzLmNvbSIsImxhc3ROYW1lIjoiVGVzdCIsIkVtYWlsIjoic3VwcG9ydEBjb2RlcnRoZW1lcy5jb20iLCJSb2xlIjoiQWRtaW4iLCJmaXJzdE5hbWUiOiJIeXBlciJ9.P27f7JNBF-vOaJFpkn-upfEh3zSprYfyhTOYhijykdI';\n\nvar mock = new MockAdapter(axios, { onNoMatch: 'passthrough' });\n\nexport function configureFakeBackend() {\n    let users = [\n        {\n            id: 1,\n            username: 'test',\n            password: 'test',\n            firstName: 'Test',\n            lastName: 'User',\n            role: 'Admin',\n            token: TOKEN,\n        },\n    ];\n\n    mock.onPost('/login/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.username === params.username && user.password === params.password;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let user = filteredUsers[0];\n                    resolve([200, user]);\n                } else {\n                    // else return error\n                    resolve([401, { message: 'Username or password is incorrect' }]);\n                }\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/logout/').reply(function (config) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => {\n                resolve([200, 'You have successfully logged out!']);\n            });\n        });\n    });\n\n    mock.onPost('/register/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // add new users\n                let [firstName, lastName] = params.fullname.split(' ');\n                let newUser = {\n                    id: users.length + 1,\n                    username: firstName,\n                    password: params.password,\n                    firstName: firstName,\n                    lastName: lastName,\n                    role: 'Admin',\n                    token: TOKEN,\n                };\n                users.push({ newUser });\n\n                resolve([200, newUser]);\n            }, 1000);\n        });\n    });\n\n    mock.onPost('/forget-password/').reply(function (config) {\n        return new Promise(function (resolve, reject) {\n            setTimeout(function () {\n                // get parameters from post request\n                let params = JSON.parse(config.data);\n\n                // find if any user matches login credentials\n                let filteredUsers = users.filter((user) => {\n                    return user.username === params.username;\n                });\n\n                if (filteredUsers.length) {\n                    // if login details are valid return user details and fake jwt token\n                    let responseJson = {\n                        message: \"We've sent you a link to reset password to your registered email.\",\n                    };\n                    resolve([200, responseJson]);\n                } else {\n                    // else return error\n                    resolve([\n                        401,\n                        {\n                            message: 'Sorry, we could not find any registered user with entered username',\n                        },\n                    ]);\n                }\n            }, 1000);\n        });\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}