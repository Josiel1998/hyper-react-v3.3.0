{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nvar Bar = /*#__PURE__*/function () {\n  function Bar(gantt, task) {\n    _classCallCheck(this, Bar);\n\n    this.set_defaults(gantt, task);\n    this.prepare();\n    this.draw();\n    this.bind();\n  }\n\n  _createClass(Bar, [{\n    key: \"set_defaults\",\n    value: function set_defaults(gantt, task) {\n      this.action_completed = false;\n      this.gantt = gantt;\n      this.task = task;\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare() {\n      this.prepare_values();\n      this.prepare_helpers();\n    }\n  }, {\n    key: \"prepare_values\",\n    value: function prepare_values() {\n      this.invalid = this.task.invalid;\n      this.height = this.gantt.options.bar_height;\n      this.x = this.compute_x();\n      this.y = this.compute_y();\n      this.corner_radius = this.gantt.options.bar_corner_radius;\n      this.duration = date_utils.diff(this.task._end, this.task._start, 'hour') / this.gantt.options.step;\n      this.width = this.gantt.options.column_width * this.duration;\n      this.progress_width = this.gantt.options.column_width * this.duration * (this.task.progress / 100) || 0;\n      this.group = createSVG('g', {\n        class: 'bar-wrapper ' + (this.task.custom_class || ''),\n        'data-id': this.task.id\n      });\n      this.bar_group = createSVG('g', {\n        class: 'bar-group',\n        append_to: this.group\n      });\n      this.handle_group = createSVG('g', {\n        class: 'handle-group',\n        append_to: this.group\n      });\n    }\n  }, {\n    key: \"prepare_helpers\",\n    value: function prepare_helpers() {\n      SVGElement.prototype.getX = function () {\n        return +this.getAttribute('x');\n      };\n\n      SVGElement.prototype.getY = function () {\n        return +this.getAttribute('y');\n      };\n\n      SVGElement.prototype.getWidth = function () {\n        return +this.getAttribute('width');\n      };\n\n      SVGElement.prototype.getHeight = function () {\n        return +this.getAttribute('height');\n      };\n\n      SVGElement.prototype.getEndX = function () {\n        return this.getX() + this.getWidth();\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      this.draw_bar();\n      this.draw_progress_bar();\n      this.draw_label();\n      this.draw_resize_handles();\n    }\n  }, {\n    key: \"draw_bar\",\n    value: function draw_bar() {\n      this.$bar = createSVG('rect', {\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: this.height,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'bar',\n        append_to: this.bar_group\n      });\n      animateSVG(this.$bar, 'width', 0, this.width);\n\n      if (this.invalid) {\n        this.$bar.classList.add('bar-invalid');\n      }\n    }\n  }, {\n    key: \"draw_progress_bar\",\n    value: function draw_progress_bar() {\n      if (this.invalid) return;\n      this.$bar_progress = createSVG('rect', {\n        x: this.x,\n        y: this.y,\n        width: this.progress_width,\n        height: this.height,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'bar-progress',\n        append_to: this.bar_group\n      });\n      animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n  }, {\n    key: \"draw_label\",\n    value: function draw_label() {\n      var _this = this;\n\n      createSVG('text', {\n        x: this.x + this.width / 2,\n        y: this.y + this.height / 2,\n        innerHTML: this.task.name,\n        class: 'bar-label',\n        append_to: this.bar_group\n      }); // labels get BBox in the next tick\n\n      requestAnimationFrame(function () {\n        return _this.update_label_position();\n      });\n    }\n  }, {\n    key: \"draw_resize_handles\",\n    value: function draw_resize_handles() {\n      if (this.invalid) return;\n      var bar = this.$bar;\n      var handle_width = 8;\n      createSVG('rect', {\n        x: bar.getX() + bar.getWidth() - 9,\n        y: bar.getY() + 1,\n        width: handle_width,\n        height: this.height - 2,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'handle right',\n        append_to: this.handle_group\n      });\n      createSVG('rect', {\n        x: bar.getX() + 1,\n        y: bar.getY() + 1,\n        width: handle_width,\n        height: this.height - 2,\n        rx: this.corner_radius,\n        ry: this.corner_radius,\n        class: 'handle left',\n        append_to: this.handle_group\n      });\n\n      if (this.task.progress && this.task.progress < 100) {\n        this.$handle_progress = createSVG('polygon', {\n          points: this.get_progress_polygon_points().join(','),\n          class: 'handle progress',\n          append_to: this.handle_group\n        });\n      }\n    }\n  }, {\n    key: \"get_progress_polygon_points\",\n    value: function get_progress_polygon_points() {\n      var bar_progress = this.$bar_progress;\n      return [bar_progress.getEndX() - 5, bar_progress.getY() + bar_progress.getHeight(), bar_progress.getEndX() + 5, bar_progress.getY() + bar_progress.getHeight(), bar_progress.getEndX(), bar_progress.getY() + bar_progress.getHeight() - 8.66];\n    }\n  }, {\n    key: \"bind\",\n    value: function bind() {\n      if (this.invalid) return;\n      this.setup_click_event();\n    }\n  }, {\n    key: \"setup_click_event\",\n    value: function setup_click_event() {\n      var _this2 = this;\n\n      $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, function (e) {\n        if (_this2.action_completed) {\n          // just finished a move action, wait for a few seconds\n          return;\n        }\n\n        _this2.show_popup();\n\n        _this2.gantt.unselect_all();\n\n        _this2.group.classList.add('active');\n      });\n      $.on(this.group, 'dblclick', function (e) {\n        if (_this2.action_completed) {\n          // just finished a move action, wait for a few seconds\n          return;\n        }\n\n        _this2.gantt.trigger_event('click', [_this2.task]);\n      });\n    }\n  }, {\n    key: \"show_popup\",\n    value: function show_popup() {\n      if (this.gantt.bar_being_dragged) return;\n      var start_date = date_utils.format(this.task._start, 'MMM D', this.gantt.options.language);\n      var end_date = date_utils.format(date_utils.add(this.task._end, -1, 'second'), 'MMM D', this.gantt.options.language);\n      var subtitle = start_date + ' - ' + end_date;\n      this.gantt.show_popup({\n        target_element: this.$bar,\n        title: this.task.name,\n        subtitle: subtitle,\n        task: this.task\n      });\n    }\n  }, {\n    key: \"update_bar_position\",\n    value: function update_bar_position(_ref) {\n      var _this3 = this;\n\n      var _ref$x = _ref.x,\n          x = _ref$x === void 0 ? null : _ref$x,\n          _ref$width = _ref.width,\n          width = _ref$width === void 0 ? null : _ref$width;\n      var bar = this.$bar;\n\n      if (x) {\n        // get all x values of parent task\n        var xs = this.task.dependencies.map(function (dep) {\n          return _this3.gantt.get_bar(dep).$bar.getX();\n        }); // child task must not go before parent\n\n        var valid_x = xs.reduce(function (prev, curr) {\n          return x >= curr;\n        }, x);\n\n        if (!valid_x) {\n          width = null;\n          return;\n        }\n\n        this.update_attr(bar, 'x', x);\n      }\n\n      if (width && width >= this.gantt.options.column_width) {\n        this.update_attr(bar, 'width', width);\n      }\n\n      this.update_label_position();\n      this.update_handle_position();\n      this.update_progressbar_position();\n      this.update_arrow_position();\n    }\n  }, {\n    key: \"date_changed\",\n    value: function date_changed() {\n      var changed = false;\n\n      var _this$compute_start_e = this.compute_start_end_date(),\n          new_start_date = _this$compute_start_e.new_start_date,\n          new_end_date = _this$compute_start_e.new_end_date;\n\n      if (Number(this.task._start) !== Number(new_start_date)) {\n        changed = true;\n        this.task._start = new_start_date;\n      }\n\n      if (Number(this.task._end) !== Number(new_end_date)) {\n        changed = true;\n        this.task._end = new_end_date;\n      }\n\n      if (!changed) return;\n      this.gantt.trigger_event('date_change', [this.task, new_start_date, date_utils.add(new_end_date, -1, 'second')]);\n    }\n  }, {\n    key: \"progress_changed\",\n    value: function progress_changed() {\n      var new_progress = this.compute_progress();\n      this.task.progress = new_progress;\n      this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n  }, {\n    key: \"set_action_completed\",\n    value: function set_action_completed() {\n      var _this4 = this;\n\n      this.action_completed = true;\n      setTimeout(function () {\n        return _this4.action_completed = false;\n      }, 1000);\n    }\n  }, {\n    key: \"compute_start_end_date\",\n    value: function compute_start_end_date() {\n      var bar = this.$bar;\n      var x_in_units = bar.getX() / this.gantt.options.column_width;\n      var new_start_date = date_utils.add(this.gantt.gantt_start, x_in_units * this.gantt.options.step, 'hour');\n      var width_in_units = bar.getWidth() / this.gantt.options.column_width;\n      var new_end_date = date_utils.add(new_start_date, width_in_units * this.gantt.options.step, 'hour');\n      return {\n        new_start_date: new_start_date,\n        new_end_date: new_end_date\n      };\n    }\n  }, {\n    key: \"compute_progress\",\n    value: function compute_progress() {\n      var progress = this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\n      return parseInt(progress, 10);\n    }\n  }, {\n    key: \"compute_x\",\n    value: function compute_x() {\n      var _this$gantt$options = this.gantt.options,\n          step = _this$gantt$options.step,\n          column_width = _this$gantt$options.column_width;\n      var task_start = this.task._start;\n      var gantt_start = this.gantt.gantt_start;\n      var diff = date_utils.diff(task_start, gantt_start, 'hour');\n      var x = diff / step * column_width;\n\n      if (this.gantt.view_is('Month')) {\n        var _diff = date_utils.diff(task_start, gantt_start, 'day');\n\n        x = _diff * column_width / 30;\n      }\n\n      return x;\n    }\n  }, {\n    key: \"compute_y\",\n    value: function compute_y() {\n      return this.gantt.options.header_height + this.gantt.options.padding + this.task._index * (this.height + this.gantt.options.padding);\n    }\n  }, {\n    key: \"get_snap_position\",\n    value: function get_snap_position(dx) {\n      var odx = dx,\n          rem,\n          position;\n\n      if (this.gantt.view_is('Week')) {\n        rem = dx % (this.gantt.options.column_width / 7);\n        position = odx - rem + (rem < this.gantt.options.column_width / 14 ? 0 : this.gantt.options.column_width / 7);\n      } else if (this.gantt.view_is('Month')) {\n        rem = dx % (this.gantt.options.column_width / 30);\n        position = odx - rem + (rem < this.gantt.options.column_width / 60 ? 0 : this.gantt.options.column_width / 30);\n      } else {\n        rem = dx % this.gantt.options.column_width;\n        position = odx - rem + (rem < this.gantt.options.column_width / 2 ? 0 : this.gantt.options.column_width);\n      }\n\n      return position;\n    }\n  }, {\n    key: \"update_attr\",\n    value: function update_attr(element, attr, value) {\n      value = +value;\n\n      if (!isNaN(value)) {\n        element.setAttribute(attr, value);\n      }\n\n      return element;\n    }\n  }, {\n    key: \"update_progressbar_position\",\n    value: function update_progressbar_position() {\n      this.$bar_progress.setAttribute('x', this.$bar.getX());\n      this.$bar_progress.setAttribute('width', this.$bar.getWidth() * (this.task.progress / 100));\n    }\n  }, {\n    key: \"update_label_position\",\n    value: function update_label_position() {\n      var bar = this.$bar,\n          label = this.group.querySelector('.bar-label');\n\n      if (label.getBBox().width > bar.getWidth()) {\n        label.classList.add('big');\n        label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n      } else {\n        label.classList.remove('big');\n        label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n      }\n    }\n  }, {\n    key: \"update_handle_position\",\n    value: function update_handle_position() {\n      var bar = this.$bar;\n      this.handle_group.querySelector('.handle.left').setAttribute('x', bar.getX() + 1);\n      this.handle_group.querySelector('.handle.right').setAttribute('x', bar.getEndX() - 9);\n      var handle = this.group.querySelector('.handle.progress');\n      handle && handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n  }, {\n    key: \"update_arrow_position\",\n    value: function update_arrow_position() {\n      this.arrows = this.arrows || [];\n\n      var _iterator = _createForOfIteratorHelper(this.arrows),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var arrow = _step.value;\n          arrow.update();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }]);\n\n  return Bar;\n}();\n\nexport { Bar as default };\n\nfunction isFunction(functionToCheck) {\n  var getType = {};\n  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';\n}","map":{"version":3,"names":["date_utils","$","createSVG","animateSVG","Bar","gantt","task","set_defaults","prepare","draw","bind","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","y","compute_y","corner_radius","bar_corner_radius","duration","diff","_end","_start","step","width","column_width","progress_width","progress","group","class","custom_class","id","bar_group","append_to","handle_group","SVGElement","prototype","getX","getAttribute","getY","getWidth","getHeight","getEndX","draw_bar","draw_progress_bar","draw_label","draw_resize_handles","$bar","rx","ry","classList","add","$bar_progress","innerHTML","name","requestAnimationFrame","update_label_position","bar","handle_width","$handle_progress","points","get_progress_polygon_points","join","bar_progress","setup_click_event","on","popup_trigger","e","show_popup","unselect_all","trigger_event","bar_being_dragged","start_date","format","language","end_date","subtitle","target_element","title","xs","dependencies","map","dep","get_bar","valid_x","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","changed","compute_start_end_date","new_start_date","new_end_date","Number","new_progress","compute_progress","setTimeout","x_in_units","gantt_start","width_in_units","parseInt","task_start","view_is","header_height","padding","_index","dx","odx","rem","position","element","attr","value","isNaN","setAttribute","label","querySelector","getBBox","remove","handle","arrows","arrow","update","isFunction","functionToCheck","getType","toString","call"],"sources":["/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/frappe-gantt/src/bar.js"],"sourcesContent":["import date_utils from './date_utils';\nimport { $, createSVG, animateSVG } from './svg_utils';\n\nexport default class Bar {\n    constructor(gantt, task) {\n        this.set_defaults(gantt, task);\n        this.prepare();\n        this.draw();\n        this.bind();\n    }\n\n    set_defaults(gantt, task) {\n        this.action_completed = false;\n        this.gantt = gantt;\n        this.task = task;\n    }\n\n    prepare() {\n        this.prepare_values();\n        this.prepare_helpers();\n    }\n\n    prepare_values() {\n        this.invalid = this.task.invalid;\n        this.height = this.gantt.options.bar_height;\n        this.x = this.compute_x();\n        this.y = this.compute_y();\n        this.corner_radius = this.gantt.options.bar_corner_radius;\n        this.duration =\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\n            this.gantt.options.step;\n        this.width = this.gantt.options.column_width * this.duration;\n        this.progress_width =\n            this.gantt.options.column_width *\n                this.duration *\n                (this.task.progress / 100) || 0;\n        this.group = createSVG('g', {\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\n            'data-id': this.task.id,\n        });\n        this.bar_group = createSVG('g', {\n            class: 'bar-group',\n            append_to: this.group,\n        });\n        this.handle_group = createSVG('g', {\n            class: 'handle-group',\n            append_to: this.group,\n        });\n    }\n\n    prepare_helpers() {\n        SVGElement.prototype.getX = function () {\n            return +this.getAttribute('x');\n        };\n        SVGElement.prototype.getY = function () {\n            return +this.getAttribute('y');\n        };\n        SVGElement.prototype.getWidth = function () {\n            return +this.getAttribute('width');\n        };\n        SVGElement.prototype.getHeight = function () {\n            return +this.getAttribute('height');\n        };\n        SVGElement.prototype.getEndX = function () {\n            return this.getX() + this.getWidth();\n        };\n    }\n\n    draw() {\n        this.draw_bar();\n        this.draw_progress_bar();\n        this.draw_label();\n        this.draw_resize_handles();\n    }\n\n    draw_bar() {\n        this.$bar = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar, 'width', 0, this.width);\n\n        if (this.invalid) {\n            this.$bar.classList.add('bar-invalid');\n        }\n    }\n\n    draw_progress_bar() {\n        if (this.invalid) return;\n        this.$bar_progress = createSVG('rect', {\n            x: this.x,\n            y: this.y,\n            width: this.progress_width,\n            height: this.height,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'bar-progress',\n            append_to: this.bar_group,\n        });\n\n        animateSVG(this.$bar_progress, 'width', 0, this.progress_width);\n    }\n\n    draw_label() {\n        createSVG('text', {\n            x: this.x + this.width / 2,\n            y: this.y + this.height / 2,\n            innerHTML: this.task.name,\n            class: 'bar-label',\n            append_to: this.bar_group,\n        });\n        // labels get BBox in the next tick\n        requestAnimationFrame(() => this.update_label_position());\n    }\n\n    draw_resize_handles() {\n        if (this.invalid) return;\n\n        const bar = this.$bar;\n        const handle_width = 8;\n\n        createSVG('rect', {\n            x: bar.getX() + bar.getWidth() - 9,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle right',\n            append_to: this.handle_group,\n        });\n\n        createSVG('rect', {\n            x: bar.getX() + 1,\n            y: bar.getY() + 1,\n            width: handle_width,\n            height: this.height - 2,\n            rx: this.corner_radius,\n            ry: this.corner_radius,\n            class: 'handle left',\n            append_to: this.handle_group,\n        });\n\n        if (this.task.progress && this.task.progress < 100) {\n            this.$handle_progress = createSVG('polygon', {\n                points: this.get_progress_polygon_points().join(','),\n                class: 'handle progress',\n                append_to: this.handle_group,\n            });\n        }\n    }\n\n    get_progress_polygon_points() {\n        const bar_progress = this.$bar_progress;\n        return [\n            bar_progress.getEndX() - 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX() + 5,\n            bar_progress.getY() + bar_progress.getHeight(),\n            bar_progress.getEndX(),\n            bar_progress.getY() + bar_progress.getHeight() - 8.66,\n        ];\n    }\n\n    bind() {\n        if (this.invalid) return;\n        this.setup_click_event();\n    }\n\n    setup_click_event() {\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.show_popup();\n            this.gantt.unselect_all();\n            this.group.classList.add('active');\n        });\n\n        $.on(this.group, 'dblclick', (e) => {\n            if (this.action_completed) {\n                // just finished a move action, wait for a few seconds\n                return;\n            }\n\n            this.gantt.trigger_event('click', [this.task]);\n        });\n    }\n\n    show_popup() {\n        if (this.gantt.bar_being_dragged) return;\n\n        const start_date = date_utils.format(\n            this.task._start,\n            'MMM D',\n            this.gantt.options.language\n        );\n        const end_date = date_utils.format(\n            date_utils.add(this.task._end, -1, 'second'),\n            'MMM D',\n            this.gantt.options.language\n        );\n        const subtitle = start_date + ' - ' + end_date;\n\n        this.gantt.show_popup({\n            target_element: this.$bar,\n            title: this.task.name,\n            subtitle: subtitle,\n            task: this.task,\n        });\n    }\n\n    update_bar_position({ x = null, width = null }) {\n        const bar = this.$bar;\n        if (x) {\n            // get all x values of parent task\n            const xs = this.task.dependencies.map((dep) => {\n                return this.gantt.get_bar(dep).$bar.getX();\n            });\n            // child task must not go before parent\n            const valid_x = xs.reduce((prev, curr) => {\n                return x >= curr;\n            }, x);\n            if (!valid_x) {\n                width = null;\n                return;\n            }\n            this.update_attr(bar, 'x', x);\n        }\n        if (width && width >= this.gantt.options.column_width) {\n            this.update_attr(bar, 'width', width);\n        }\n        this.update_label_position();\n        this.update_handle_position();\n        this.update_progressbar_position();\n        this.update_arrow_position();\n    }\n\n    date_changed() {\n        let changed = false;\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\n\n        if (Number(this.task._start) !== Number(new_start_date)) {\n            changed = true;\n            this.task._start = new_start_date;\n        }\n\n        if (Number(this.task._end) !== Number(new_end_date)) {\n            changed = true;\n            this.task._end = new_end_date;\n        }\n\n        if (!changed) return;\n\n        this.gantt.trigger_event('date_change', [\n            this.task,\n            new_start_date,\n            date_utils.add(new_end_date, -1, 'second'),\n        ]);\n    }\n\n    progress_changed() {\n        const new_progress = this.compute_progress();\n        this.task.progress = new_progress;\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\n    }\n\n    set_action_completed() {\n        this.action_completed = true;\n        setTimeout(() => (this.action_completed = false), 1000);\n    }\n\n    compute_start_end_date() {\n        const bar = this.$bar;\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\n        const new_start_date = date_utils.add(\n            this.gantt.gantt_start,\n            x_in_units * this.gantt.options.step,\n            'hour'\n        );\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\n        const new_end_date = date_utils.add(\n            new_start_date,\n            width_in_units * this.gantt.options.step,\n            'hour'\n        );\n\n        return { new_start_date, new_end_date };\n    }\n\n    compute_progress() {\n        const progress =\n            (this.$bar_progress.getWidth() / this.$bar.getWidth()) * 100;\n        return parseInt(progress, 10);\n    }\n\n    compute_x() {\n        const { step, column_width } = this.gantt.options;\n        const task_start = this.task._start;\n        const gantt_start = this.gantt.gantt_start;\n\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\n        let x = (diff / step) * column_width;\n\n        if (this.gantt.view_is('Month')) {\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\n            x = (diff * column_width) / 30;\n        }\n        return x;\n    }\n\n    compute_y() {\n        return (\n            this.gantt.options.header_height +\n            this.gantt.options.padding +\n            this.task._index * (this.height + this.gantt.options.padding)\n        );\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.gantt.view_is('Week')) {\n            rem = dx % (this.gantt.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 14\n                    ? 0\n                    : this.gantt.options.column_width / 7);\n        } else if (this.gantt.view_is('Month')) {\n            rem = dx % (this.gantt.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 60\n                    ? 0\n                    : this.gantt.options.column_width / 30);\n        } else {\n            rem = dx % this.gantt.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.gantt.options.column_width / 2\n                    ? 0\n                    : this.gantt.options.column_width);\n        }\n        return position;\n    }\n\n    update_attr(element, attr, value) {\n        value = +value;\n        if (!isNaN(value)) {\n            element.setAttribute(attr, value);\n        }\n        return element;\n    }\n\n    update_progressbar_position() {\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\n        this.$bar_progress.setAttribute(\n            'width',\n            this.$bar.getWidth() * (this.task.progress / 100)\n        );\n    }\n\n    update_label_position() {\n        const bar = this.$bar,\n            label = this.group.querySelector('.bar-label');\n\n        if (label.getBBox().width > bar.getWidth()) {\n            label.classList.add('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\n        } else {\n            label.classList.remove('big');\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\n        }\n    }\n\n    update_handle_position() {\n        const bar = this.$bar;\n        this.handle_group\n            .querySelector('.handle.left')\n            .setAttribute('x', bar.getX() + 1);\n        this.handle_group\n            .querySelector('.handle.right')\n            .setAttribute('x', bar.getEndX() - 9);\n        const handle = this.group.querySelector('.handle.progress');\n        handle &&\n            handle.setAttribute('points', this.get_progress_polygon_points());\n    }\n\n    update_arrow_position() {\n        this.arrows = this.arrows || [];\n        for (let arrow of this.arrows) {\n            arrow.update();\n        }\n    }\n}\n\nfunction isFunction(functionToCheck) {\n    var getType = {};\n    return (\n        functionToCheck &&\n        getType.toString.call(functionToCheck) === '[object Function]'\n    );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}