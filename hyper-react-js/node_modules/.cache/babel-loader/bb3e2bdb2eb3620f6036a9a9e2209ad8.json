{"ast":null,"code":"import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\nimport './gantt.scss';\nconst VIEW_MODE = {\n  QUARTER_DAY: 'Quarter Day',\n  HALF_DAY: 'Half Day',\n  DAY: 'Day',\n  WEEK: 'Week',\n  MONTH: 'Month',\n  YEAR: 'Year'\n};\nexport default class Gantt {\n  constructor(wrapper, tasks, options) {\n    this.setup_wrapper(wrapper);\n    this.setup_options(options);\n    this.setup_tasks(tasks); // initialize with default view mode\n\n    this.change_view_mode();\n    this.bind_events();\n  }\n\n  setup_wrapper(element) {\n    let svg_element, wrapper_element; // CSS Selector is passed\n\n    if (typeof element === 'string') {\n      element = document.querySelector(element);\n    } // get the SVGElement\n\n\n    if (element instanceof HTMLElement) {\n      wrapper_element = element;\n      svg_element = element.querySelector('svg');\n    } else if (element instanceof SVGElement) {\n      svg_element = element;\n    } else {\n      throw new TypeError('FrappÃ© Gantt only supports usage of a string CSS selector,' + \" HTML DOM element or SVG DOM element for the 'element' parameter\");\n    } // svg element\n\n\n    if (!svg_element) {\n      // create it\n      this.$svg = createSVG('svg', {\n        append_to: wrapper_element,\n        class: 'gantt'\n      });\n    } else {\n      this.$svg = svg_element;\n      this.$svg.classList.add('gantt');\n    } // wrapper element\n\n\n    this.$container = document.createElement('div');\n    this.$container.classList.add('gantt-container');\n    const parent_element = this.$svg.parentElement;\n    parent_element.appendChild(this.$container);\n    this.$container.appendChild(this.$svg); // popup wrapper\n\n    this.popup_wrapper = document.createElement('div');\n    this.popup_wrapper.classList.add('popup-wrapper');\n    this.$container.appendChild(this.popup_wrapper);\n  }\n\n  setup_options(options) {\n    const default_options = {\n      header_height: 50,\n      column_width: 30,\n      step: 24,\n      view_modes: [...Object.values(VIEW_MODE)],\n      bar_height: 20,\n      bar_corner_radius: 3,\n      arrow_curve: 5,\n      padding: 18,\n      view_mode: 'Day',\n      date_format: 'YYYY-MM-DD',\n      popup_trigger: 'click',\n      custom_popup_html: null,\n      language: 'en'\n    };\n    this.options = Object.assign({}, default_options, options);\n  }\n\n  setup_tasks(tasks) {\n    // prepare tasks\n    this.tasks = tasks.map((task, i) => {\n      // convert to Date objects\n      task._start = date_utils.parse(task.start);\n      task._end = date_utils.parse(task.end); // make task invalid if duration too large\n\n      if (date_utils.diff(task._end, task._start, 'year') > 10) {\n        task.end = null;\n      } // cache index\n\n\n      task._index = i; // invalid dates\n\n      if (!task.start && !task.end) {\n        const today = date_utils.today();\n        task._start = today;\n        task._end = date_utils.add(today, 2, 'day');\n      }\n\n      if (!task.start && task.end) {\n        task._start = date_utils.add(task._end, -2, 'day');\n      }\n\n      if (task.start && !task.end) {\n        task._end = date_utils.add(task._start, 2, 'day');\n      } // if hours is not set, assume the last day is full day\n      // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n\n\n      const task_end_values = date_utils.get_date_values(task._end);\n\n      if (task_end_values.slice(3).every(d => d === 0)) {\n        task._end = date_utils.add(task._end, 24, 'hour');\n      } // invalid flag\n\n\n      if (!task.start || !task.end) {\n        task.invalid = true;\n      } // dependencies\n\n\n      if (typeof task.dependencies === 'string' || !task.dependencies) {\n        let deps = [];\n\n        if (task.dependencies) {\n          deps = task.dependencies.split(',').map(d => d.trim()).filter(d => d);\n        }\n\n        task.dependencies = deps;\n      } // uids\n\n\n      if (!task.id) {\n        task.id = generate_id(task);\n      }\n\n      return task;\n    });\n    this.setup_dependencies();\n  }\n\n  setup_dependencies() {\n    this.dependency_map = {};\n\n    for (let t of this.tasks) {\n      for (let d of t.dependencies) {\n        this.dependency_map[d] = this.dependency_map[d] || [];\n        this.dependency_map[d].push(t.id);\n      }\n    }\n  }\n\n  refresh(tasks) {\n    this.setup_tasks(tasks);\n    this.change_view_mode();\n  }\n\n  change_view_mode() {\n    let mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.view_mode;\n    this.update_view_scale(mode);\n    this.setup_dates();\n    this.render(); // fire viewmode_change event\n\n    this.trigger_event('view_change', [mode]);\n  }\n\n  update_view_scale(view_mode) {\n    this.options.view_mode = view_mode;\n\n    if (view_mode === VIEW_MODE.DAY) {\n      this.options.step = 24;\n      this.options.column_width = 38;\n    } else if (view_mode === VIEW_MODE.HALF_DAY) {\n      this.options.step = 24 / 2;\n      this.options.column_width = 38;\n    } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n      this.options.step = 24 / 4;\n      this.options.column_width = 38;\n    } else if (view_mode === VIEW_MODE.WEEK) {\n      this.options.step = 24 * 7;\n      this.options.column_width = 140;\n    } else if (view_mode === VIEW_MODE.MONTH) {\n      this.options.step = 24 * 30;\n      this.options.column_width = 120;\n    } else if (view_mode === VIEW_MODE.YEAR) {\n      this.options.step = 24 * 365;\n      this.options.column_width = 120;\n    }\n  }\n\n  setup_dates() {\n    this.setup_gantt_dates();\n    this.setup_date_values();\n  }\n\n  setup_gantt_dates() {\n    this.gantt_start = this.gantt_end = null;\n\n    for (let task of this.tasks) {\n      // set global start and end date\n      if (!this.gantt_start || task._start < this.gantt_start) {\n        this.gantt_start = task._start;\n      }\n\n      if (!this.gantt_end || task._end > this.gantt_end) {\n        this.gantt_end = task._end;\n      }\n    }\n\n    this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n    this.gantt_end = date_utils.start_of(this.gantt_end, 'day'); // add date padding on both sides\n\n    if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n      this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n      this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n    } else if (this.view_is(VIEW_MODE.MONTH)) {\n      this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n      this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n    } else if (this.view_is(VIEW_MODE.YEAR)) {\n      this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n      this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n    } else {\n      this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n      this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n    }\n  }\n\n  setup_date_values() {\n    this.dates = [];\n    let cur_date = null;\n\n    while (cur_date === null || cur_date < this.gantt_end) {\n      if (!cur_date) {\n        cur_date = date_utils.clone(this.gantt_start);\n      } else {\n        if (this.view_is(VIEW_MODE.YEAR)) {\n          cur_date = date_utils.add(cur_date, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n          cur_date = date_utils.add(cur_date, 1, 'month');\n        } else {\n          cur_date = date_utils.add(cur_date, this.options.step, 'hour');\n        }\n      }\n\n      this.dates.push(cur_date);\n    }\n  }\n\n  bind_events() {\n    this.bind_grid_click();\n    this.bind_bar_events();\n  }\n\n  render() {\n    this.clear();\n    this.setup_layers();\n    this.make_grid();\n    this.make_dates();\n    this.make_bars();\n    this.make_arrows();\n    this.map_arrows_on_bars();\n    this.set_width();\n    this.set_scroll_position();\n  }\n\n  setup_layers() {\n    this.layers = {};\n    const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details']; // make group layers\n\n    for (let layer of layers) {\n      this.layers[layer] = createSVG('g', {\n        class: layer,\n        append_to: this.$svg\n      });\n    }\n  }\n\n  make_grid() {\n    this.make_grid_background();\n    this.make_grid_rows();\n    this.make_grid_header();\n    this.make_grid_ticks();\n    this.make_grid_highlights();\n  }\n\n  make_grid_background() {\n    const grid_width = this.dates.length * this.options.column_width;\n    const grid_height = this.options.header_height + this.options.padding + (this.options.bar_height + this.options.padding) * this.tasks.length;\n    createSVG('rect', {\n      x: 0,\n      y: 0,\n      width: grid_width,\n      height: grid_height,\n      class: 'grid-background',\n      append_to: this.layers.grid\n    });\n    $.attr(this.$svg, {\n      height: grid_height + this.options.padding + 100,\n      width: '100%'\n    });\n  }\n\n  make_grid_rows() {\n    const rows_layer = createSVG('g', {\n      append_to: this.layers.grid\n    });\n    const lines_layer = createSVG('g', {\n      append_to: this.layers.grid\n    });\n    const row_width = this.dates.length * this.options.column_width;\n    const row_height = this.options.bar_height + this.options.padding;\n    let row_y = this.options.header_height + this.options.padding / 2;\n\n    for (let task of this.tasks) {\n      createSVG('rect', {\n        x: 0,\n        y: row_y,\n        width: row_width,\n        height: row_height,\n        class: 'grid-row',\n        append_to: rows_layer\n      });\n      createSVG('line', {\n        x1: 0,\n        y1: row_y + row_height,\n        x2: row_width,\n        y2: row_y + row_height,\n        class: 'row-line',\n        append_to: lines_layer\n      });\n      row_y += this.options.bar_height + this.options.padding;\n    }\n  }\n\n  make_grid_header() {\n    const header_width = this.dates.length * this.options.column_width;\n    const header_height = this.options.header_height + 10;\n    createSVG('rect', {\n      x: 0,\n      y: 0,\n      width: header_width,\n      height: header_height,\n      class: 'grid-header',\n      append_to: this.layers.grid\n    });\n  }\n\n  make_grid_ticks() {\n    let tick_x = 0;\n    let tick_y = this.options.header_height + this.options.padding / 2;\n    let tick_height = (this.options.bar_height + this.options.padding) * this.tasks.length;\n\n    for (let date of this.dates) {\n      let tick_class = 'tick'; // thick tick for monday\n\n      if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n        tick_class += ' thick';\n      } // thick tick for first week\n\n\n      if (this.view_is(VIEW_MODE.WEEK) && date.getDate() >= 1 && date.getDate() < 8) {\n        tick_class += ' thick';\n      } // thick ticks for quarters\n\n\n      if (this.view_is(VIEW_MODE.MONTH) && (date.getMonth() + 1) % 3 === 0) {\n        tick_class += ' thick';\n      }\n\n      createSVG('path', {\n        d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n        class: tick_class,\n        append_to: this.layers.grid\n      });\n\n      if (this.view_is(VIEW_MODE.MONTH)) {\n        tick_x += date_utils.get_days_in_month(date) * this.options.column_width / 30;\n      } else {\n        tick_x += this.options.column_width;\n      }\n    }\n  }\n\n  make_grid_highlights() {\n    // highlight today's date\n    if (this.view_is(VIEW_MODE.DAY)) {\n      const x = date_utils.diff(date_utils.today(), this.gantt_start, 'hour') / this.options.step * this.options.column_width;\n      const y = 0;\n      const width = this.options.column_width;\n      const height = (this.options.bar_height + this.options.padding) * this.tasks.length + this.options.header_height + this.options.padding / 2;\n      createSVG('rect', {\n        x,\n        y,\n        width,\n        height,\n        class: 'today-highlight',\n        append_to: this.layers.grid\n      });\n    }\n  }\n\n  make_dates() {\n    for (let date of this.get_dates_to_draw()) {\n      createSVG('text', {\n        x: date.lower_x,\n        y: date.lower_y,\n        innerHTML: date.lower_text,\n        class: 'lower-text',\n        append_to: this.layers.date\n      });\n\n      if (date.upper_text) {\n        const $upper_text = createSVG('text', {\n          x: date.upper_x,\n          y: date.upper_y,\n          innerHTML: date.upper_text,\n          class: 'upper-text',\n          append_to: this.layers.date\n        }); // remove out-of-bound dates\n\n        if ($upper_text.getBBox().x2 > this.layers.grid.getBBox().width) {\n          $upper_text.remove();\n        }\n      }\n    }\n  }\n\n  get_dates_to_draw() {\n    let last_date = null;\n    const dates = this.dates.map((date, i) => {\n      const d = this.get_date_info(date, last_date, i);\n      last_date = date;\n      return d;\n    });\n    return dates;\n  }\n\n  get_date_info(date, last_date, i) {\n    if (!last_date) {\n      last_date = date_utils.add(date, 1, 'year');\n    }\n\n    const date_text = {\n      'Quarter Day_lower': date_utils.format(date, 'HH', this.options.language),\n      'Half Day_lower': date_utils.format(date, 'HH', this.options.language),\n      Day_lower: date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D', this.options.language) : '',\n      Week_lower: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language),\n      Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n      Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n      'Quarter Day_upper': date.getDate() !== last_date.getDate() ? date_utils.format(date, 'D MMM', this.options.language) : '',\n      'Half Day_upper': date.getDate() !== last_date.getDate() ? date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'D MMM', this.options.language) : date_utils.format(date, 'D', this.options.language) : '',\n      Day_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n      Week_upper: date.getMonth() !== last_date.getMonth() ? date_utils.format(date, 'MMMM', this.options.language) : '',\n      Month_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : '',\n      Year_upper: date.getFullYear() !== last_date.getFullYear() ? date_utils.format(date, 'YYYY', this.options.language) : ''\n    };\n    const base_pos = {\n      x: i * this.options.column_width,\n      lower_y: this.options.header_height,\n      upper_y: this.options.header_height - 25\n    };\n    const x_pos = {\n      'Quarter Day_lower': this.options.column_width * 4 / 2,\n      'Quarter Day_upper': 0,\n      'Half Day_lower': this.options.column_width * 2 / 2,\n      'Half Day_upper': 0,\n      Day_lower: this.options.column_width / 2,\n      Day_upper: this.options.column_width * 30 / 2,\n      Week_lower: 0,\n      Week_upper: this.options.column_width * 4 / 2,\n      Month_lower: this.options.column_width / 2,\n      Month_upper: this.options.column_width * 12 / 2,\n      Year_lower: this.options.column_width / 2,\n      Year_upper: this.options.column_width * 30 / 2\n    };\n    return {\n      upper_text: date_text[`${this.options.view_mode}_upper`],\n      lower_text: date_text[`${this.options.view_mode}_lower`],\n      upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n      upper_y: base_pos.upper_y,\n      lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n      lower_y: base_pos.lower_y\n    };\n  }\n\n  make_bars() {\n    this.bars = this.tasks.map(task => {\n      const bar = new Bar(this, task);\n      this.layers.bar.appendChild(bar.group);\n      return bar;\n    });\n  }\n\n  make_arrows() {\n    this.arrows = [];\n\n    for (let task of this.tasks) {\n      let arrows = [];\n      arrows = task.dependencies.map(task_id => {\n        const dependency = this.get_task(task_id);\n        if (!dependency) return;\n        const arrow = new Arrow(this, this.bars[dependency._index], // from_task\n        this.bars[task._index] // to_task\n        );\n        this.layers.arrow.appendChild(arrow.element);\n        return arrow;\n      }).filter(Boolean); // filter falsy values\n\n      this.arrows = this.arrows.concat(arrows);\n    }\n  }\n\n  map_arrows_on_bars() {\n    for (let bar of this.bars) {\n      bar.arrows = this.arrows.filter(arrow => {\n        return arrow.from_task.task.id === bar.task.id || arrow.to_task.task.id === bar.task.id;\n      });\n    }\n  }\n\n  set_width() {\n    const cur_width = this.$svg.getBoundingClientRect().width;\n    const actual_width = this.$svg.querySelector('.grid .grid-row').getAttribute('width');\n\n    if (cur_width < actual_width) {\n      this.$svg.setAttribute('width', actual_width);\n    }\n  }\n\n  set_scroll_position() {\n    const parent_element = this.$svg.parentElement;\n    if (!parent_element) return;\n    const hours_before_first_task = date_utils.diff(this.get_oldest_starting_date(), this.gantt_start, 'hour');\n    const scroll_pos = hours_before_first_task / this.options.step * this.options.column_width - this.options.column_width;\n    parent_element.scrollLeft = scroll_pos;\n  }\n\n  bind_grid_click() {\n    $.on(this.$svg, this.options.popup_trigger, '.grid-row, .grid-header', () => {\n      this.unselect_all();\n      this.hide_popup();\n    });\n  }\n\n  bind_bar_events() {\n    let is_dragging = false;\n    let x_on_start = 0;\n    let y_on_start = 0;\n    let is_resizing_left = false;\n    let is_resizing_right = false;\n    let parent_bar_id = null;\n    let bars = []; // instanceof Bar\n\n    this.bar_being_dragged = null;\n\n    function action_in_progress() {\n      return is_dragging || is_resizing_left || is_resizing_right;\n    }\n\n    $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n      const bar_wrapper = $.closest('.bar-wrapper', element);\n\n      if (element.classList.contains('left')) {\n        is_resizing_left = true;\n      } else if (element.classList.contains('right')) {\n        is_resizing_right = true;\n      } else if (element.classList.contains('bar-wrapper')) {\n        is_dragging = true;\n      }\n\n      bar_wrapper.classList.add('active');\n      x_on_start = e.offsetX;\n      y_on_start = e.offsetY;\n      parent_bar_id = bar_wrapper.getAttribute('data-id');\n      const ids = [parent_bar_id, ...this.get_all_dependent_tasks(parent_bar_id)];\n      bars = ids.map(id => this.get_bar(id));\n      this.bar_being_dragged = parent_bar_id;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        $bar.ox = $bar.getX();\n        $bar.oy = $bar.getY();\n        $bar.owidth = $bar.getWidth();\n        $bar.finaldx = 0;\n      });\n    });\n    $.on(this.$svg, 'mousemove', e => {\n      if (!action_in_progress()) return;\n      const dx = e.offsetX - x_on_start;\n      const dy = e.offsetY - y_on_start;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        $bar.finaldx = this.get_snap_position(dx);\n        this.hide_popup();\n\n        if (is_resizing_left) {\n          if (parent_bar_id === bar.task.id) {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx,\n              width: $bar.owidth - $bar.finaldx\n            });\n          } else {\n            bar.update_bar_position({\n              x: $bar.ox + $bar.finaldx\n            });\n          }\n        } else if (is_resizing_right) {\n          if (parent_bar_id === bar.task.id) {\n            bar.update_bar_position({\n              width: $bar.owidth + $bar.finaldx\n            });\n          }\n        } else if (is_dragging) {\n          bar.update_bar_position({\n            x: $bar.ox + $bar.finaldx\n          });\n        }\n      });\n    });\n    document.addEventListener('mouseup', e => {\n      if (is_dragging || is_resizing_left || is_resizing_right) {\n        bars.forEach(bar => bar.group.classList.remove('active'));\n      }\n\n      is_dragging = false;\n      is_resizing_left = false;\n      is_resizing_right = false;\n    });\n    $.on(this.$svg, 'mouseup', e => {\n      this.bar_being_dragged = null;\n      bars.forEach(bar => {\n        const $bar = bar.$bar;\n        if (!$bar.finaldx) return;\n        bar.date_changed();\n        bar.set_action_completed();\n      });\n    });\n    this.bind_bar_progress();\n  }\n\n  bind_bar_progress() {\n    let x_on_start = 0;\n    let y_on_start = 0;\n    let is_resizing = null;\n    let bar = null;\n    let $bar_progress = null;\n    let $bar = null;\n    $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n      is_resizing = true;\n      x_on_start = e.offsetX;\n      y_on_start = e.offsetY;\n      const $bar_wrapper = $.closest('.bar-wrapper', handle);\n      const id = $bar_wrapper.getAttribute('data-id');\n      bar = this.get_bar(id);\n      $bar_progress = bar.$bar_progress;\n      $bar = bar.$bar;\n      $bar_progress.finaldx = 0;\n      $bar_progress.owidth = $bar_progress.getWidth();\n      $bar_progress.min_dx = -$bar_progress.getWidth();\n      $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n    });\n    $.on(this.$svg, 'mousemove', e => {\n      if (!is_resizing) return;\n      let dx = e.offsetX - x_on_start;\n      let dy = e.offsetY - y_on_start;\n\n      if (dx > $bar_progress.max_dx) {\n        dx = $bar_progress.max_dx;\n      }\n\n      if (dx < $bar_progress.min_dx) {\n        dx = $bar_progress.min_dx;\n      }\n\n      const $handle = bar.$handle_progress;\n      $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n      $.attr($handle, 'points', bar.get_progress_polygon_points());\n      $bar_progress.finaldx = dx;\n    });\n    $.on(this.$svg, 'mouseup', () => {\n      is_resizing = false;\n      if (!($bar_progress && $bar_progress.finaldx)) return;\n      bar.progress_changed();\n      bar.set_action_completed();\n    });\n  }\n\n  get_all_dependent_tasks(task_id) {\n    let out = [];\n    let to_process = [task_id];\n\n    while (to_process.length) {\n      const deps = to_process.reduce((acc, curr) => {\n        acc = acc.concat(this.dependency_map[curr]);\n        return acc;\n      }, []);\n      out = out.concat(deps);\n      to_process = deps.filter(d => !to_process.includes(d));\n    }\n\n    return out.filter(Boolean);\n  }\n\n  get_snap_position(dx) {\n    let odx = dx,\n        rem,\n        position;\n\n    if (this.view_is(VIEW_MODE.WEEK)) {\n      rem = dx % (this.options.column_width / 7);\n      position = odx - rem + (rem < this.options.column_width / 14 ? 0 : this.options.column_width / 7);\n    } else if (this.view_is(VIEW_MODE.MONTH)) {\n      rem = dx % (this.options.column_width / 30);\n      position = odx - rem + (rem < this.options.column_width / 60 ? 0 : this.options.column_width / 30);\n    } else {\n      rem = dx % this.options.column_width;\n      position = odx - rem + (rem < this.options.column_width / 2 ? 0 : this.options.column_width);\n    }\n\n    return position;\n  }\n\n  unselect_all() {\n    [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\n      el.classList.remove('active');\n    });\n  }\n\n  view_is(modes) {\n    if (typeof modes === 'string') {\n      return this.options.view_mode === modes;\n    }\n\n    if (Array.isArray(modes)) {\n      return modes.some(mode => this.options.view_mode === mode);\n    }\n\n    return false;\n  }\n\n  get_task(id) {\n    return this.tasks.find(task => {\n      return task.id === id;\n    });\n  }\n\n  get_bar(id) {\n    return this.bars.find(bar => {\n      return bar.task.id === id;\n    });\n  }\n\n  show_popup(options) {\n    if (!this.popup) {\n      this.popup = new Popup(this.popup_wrapper, this.options.custom_popup_html);\n    }\n\n    this.popup.show(options);\n  }\n\n  hide_popup() {\n    this.popup && this.popup.hide();\n  }\n\n  trigger_event(event, args) {\n    if (this.options['on_' + event]) {\n      this.options['on_' + event].apply(null, args);\n    }\n  }\n  /**\n   * Gets the oldest starting date from the list of tasks\n   *\n   * @returns Date\n   * @memberof Gantt\n   */\n\n\n  get_oldest_starting_date() {\n    return this.tasks.map(task => task._start).reduce((prev_date, cur_date) => cur_date <= prev_date ? cur_date : prev_date);\n  }\n  /**\n   * Clear all elements from the parent svg element\n   *\n   * @memberof Gantt\n   */\n\n\n  clear() {\n    this.$svg.innerHTML = '';\n  }\n\n}\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n  return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}","map":{"version":3,"names":["date_utils","$","createSVG","Bar","Arrow","Popup","VIEW_MODE","QUARTER_DAY","HALF_DAY","DAY","WEEK","MONTH","YEAR","Gantt","constructor","wrapper","tasks","options","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","element","svg_element","wrapper_element","document","querySelector","HTMLElement","SVGElement","TypeError","$svg","append_to","class","classList","add","$container","createElement","parent_element","parentElement","appendChild","popup_wrapper","default_options","header_height","column_width","step","view_modes","Object","values","bar_height","bar_corner_radius","arrow_curve","padding","view_mode","date_format","popup_trigger","custom_popup_html","language","assign","map","task","i","_start","parse","start","_end","end","diff","_index","today","task_end_values","get_date_values","slice","every","d","invalid","dependencies","deps","split","trim","filter","id","generate_id","setup_dependencies","dependency_map","t","push","refresh","mode","update_view_scale","setup_dates","render","trigger_event","setup_gantt_dates","setup_date_values","gantt_start","gantt_end","start_of","view_is","dates","cur_date","clone","bind_grid_click","bind_bar_events","clear","setup_layers","make_grid","make_dates","make_bars","make_arrows","map_arrows_on_bars","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","length","grid_height","x","y","width","height","grid","attr","rows_layer","lines_layer","row_width","row_height","row_y","x1","y1","x2","y2","header_width","tick_x","tick_y","tick_height","date","tick_class","getDate","getMonth","get_days_in_month","get_dates_to_draw","lower_x","lower_y","innerHTML","lower_text","upper_text","$upper_text","upper_x","upper_y","getBBox","remove","last_date","get_date_info","date_text","format","Day_lower","Week_lower","Month_lower","Year_lower","Day_upper","Week_upper","Month_upper","getFullYear","Year_upper","base_pos","x_pos","bars","bar","group","arrows","task_id","dependency","get_task","arrow","Boolean","concat","from_task","to_task","cur_width","getBoundingClientRect","actual_width","getAttribute","setAttribute","hours_before_first_task","get_oldest_starting_date","scroll_pos","scrollLeft","on","unselect_all","hide_popup","is_dragging","x_on_start","y_on_start","is_resizing_left","is_resizing_right","parent_bar_id","bar_being_dragged","action_in_progress","e","bar_wrapper","closest","contains","offsetX","offsetY","ids","get_all_dependent_tasks","get_bar","forEach","$bar","ox","getX","oy","getY","owidth","getWidth","finaldx","dx","dy","get_snap_position","update_bar_position","addEventListener","date_changed","set_action_completed","bind_bar_progress","is_resizing","$bar_progress","handle","$bar_wrapper","min_dx","max_dx","$handle","$handle_progress","get_progress_polygon_points","progress_changed","out","to_process","reduce","acc","curr","includes","odx","rem","position","querySelectorAll","el","modes","Array","isArray","some","find","show_popup","popup","show","hide","event","args","apply","prev_date","name","Math","random","toString"],"sources":["/Users/josieldelgadillo/GitHub_M1/GitHub/hyper-react-v3.3.0/hyper-react-js/node_modules/frappe-gantt/src/index.js"],"sourcesContent":["import date_utils from './date_utils';\nimport { $, createSVG } from './svg_utils';\nimport Bar from './bar';\nimport Arrow from './arrow';\nimport Popup from './popup';\n\nimport './gantt.scss';\n\nconst VIEW_MODE = {\n    QUARTER_DAY: 'Quarter Day',\n    HALF_DAY: 'Half Day',\n    DAY: 'Day',\n    WEEK: 'Week',\n    MONTH: 'Month',\n    YEAR: 'Year',\n};\n\nexport default class Gantt {\n    constructor(wrapper, tasks, options) {\n        this.setup_wrapper(wrapper);\n        this.setup_options(options);\n        this.setup_tasks(tasks);\n        // initialize with default view mode\n        this.change_view_mode();\n        this.bind_events();\n    }\n\n    setup_wrapper(element) {\n        let svg_element, wrapper_element;\n\n        // CSS Selector is passed\n        if (typeof element === 'string') {\n            element = document.querySelector(element);\n        }\n\n        // get the SVGElement\n        if (element instanceof HTMLElement) {\n            wrapper_element = element;\n            svg_element = element.querySelector('svg');\n        } else if (element instanceof SVGElement) {\n            svg_element = element;\n        } else {\n            throw new TypeError(\n                'FrappÃ© Gantt only supports usage of a string CSS selector,' +\n                    \" HTML DOM element or SVG DOM element for the 'element' parameter\"\n            );\n        }\n\n        // svg element\n        if (!svg_element) {\n            // create it\n            this.$svg = createSVG('svg', {\n                append_to: wrapper_element,\n                class: 'gantt',\n            });\n        } else {\n            this.$svg = svg_element;\n            this.$svg.classList.add('gantt');\n        }\n\n        // wrapper element\n        this.$container = document.createElement('div');\n        this.$container.classList.add('gantt-container');\n\n        const parent_element = this.$svg.parentElement;\n        parent_element.appendChild(this.$container);\n        this.$container.appendChild(this.$svg);\n\n        // popup wrapper\n        this.popup_wrapper = document.createElement('div');\n        this.popup_wrapper.classList.add('popup-wrapper');\n        this.$container.appendChild(this.popup_wrapper);\n    }\n\n    setup_options(options) {\n        const default_options = {\n            header_height: 50,\n            column_width: 30,\n            step: 24,\n            view_modes: [...Object.values(VIEW_MODE)],\n            bar_height: 20,\n            bar_corner_radius: 3,\n            arrow_curve: 5,\n            padding: 18,\n            view_mode: 'Day',\n            date_format: 'YYYY-MM-DD',\n            popup_trigger: 'click',\n            custom_popup_html: null,\n            language: 'en',\n        };\n        this.options = Object.assign({}, default_options, options);\n    }\n\n    setup_tasks(tasks) {\n        // prepare tasks\n        this.tasks = tasks.map((task, i) => {\n            // convert to Date objects\n            task._start = date_utils.parse(task.start);\n            task._end = date_utils.parse(task.end);\n\n            // make task invalid if duration too large\n            if (date_utils.diff(task._end, task._start, 'year') > 10) {\n                task.end = null;\n            }\n\n            // cache index\n            task._index = i;\n\n            // invalid dates\n            if (!task.start && !task.end) {\n                const today = date_utils.today();\n                task._start = today;\n                task._end = date_utils.add(today, 2, 'day');\n            }\n\n            if (!task.start && task.end) {\n                task._start = date_utils.add(task._end, -2, 'day');\n            }\n\n            if (task.start && !task.end) {\n                task._end = date_utils.add(task._start, 2, 'day');\n            }\n\n            // if hours is not set, assume the last day is full day\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\n            const task_end_values = date_utils.get_date_values(task._end);\n            if (task_end_values.slice(3).every((d) => d === 0)) {\n                task._end = date_utils.add(task._end, 24, 'hour');\n            }\n\n            // invalid flag\n            if (!task.start || !task.end) {\n                task.invalid = true;\n            }\n\n            // dependencies\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\n                let deps = [];\n                if (task.dependencies) {\n                    deps = task.dependencies\n                        .split(',')\n                        .map((d) => d.trim())\n                        .filter((d) => d);\n                }\n                task.dependencies = deps;\n            }\n\n            // uids\n            if (!task.id) {\n                task.id = generate_id(task);\n            }\n\n            return task;\n        });\n\n        this.setup_dependencies();\n    }\n\n    setup_dependencies() {\n        this.dependency_map = {};\n        for (let t of this.tasks) {\n            for (let d of t.dependencies) {\n                this.dependency_map[d] = this.dependency_map[d] || [];\n                this.dependency_map[d].push(t.id);\n            }\n        }\n    }\n\n    refresh(tasks) {\n        this.setup_tasks(tasks);\n        this.change_view_mode();\n    }\n\n    change_view_mode(mode = this.options.view_mode) {\n        this.update_view_scale(mode);\n        this.setup_dates();\n        this.render();\n        // fire viewmode_change event\n        this.trigger_event('view_change', [mode]);\n    }\n\n    update_view_scale(view_mode) {\n        this.options.view_mode = view_mode;\n\n        if (view_mode === VIEW_MODE.DAY) {\n            this.options.step = 24;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\n            this.options.step = 24 / 2;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\n            this.options.step = 24 / 4;\n            this.options.column_width = 38;\n        } else if (view_mode === VIEW_MODE.WEEK) {\n            this.options.step = 24 * 7;\n            this.options.column_width = 140;\n        } else if (view_mode === VIEW_MODE.MONTH) {\n            this.options.step = 24 * 30;\n            this.options.column_width = 120;\n        } else if (view_mode === VIEW_MODE.YEAR) {\n            this.options.step = 24 * 365;\n            this.options.column_width = 120;\n        }\n    }\n\n    setup_dates() {\n        this.setup_gantt_dates();\n        this.setup_date_values();\n    }\n\n    setup_gantt_dates() {\n        this.gantt_start = this.gantt_end = null;\n\n        for (let task of this.tasks) {\n            // set global start and end date\n            if (!this.gantt_start || task._start < this.gantt_start) {\n                this.gantt_start = task._start;\n            }\n            if (!this.gantt_end || task._end > this.gantt_end) {\n                this.gantt_end = task._end;\n            }\n        }\n\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\n\n        // add date padding on both sides\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\n            this.gantt_start = date_utils.add(this.gantt_start, -2, 'year');\n            this.gantt_end = date_utils.add(this.gantt_end, 2, 'year');\n        } else {\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\n        }\n    }\n\n    setup_date_values() {\n        this.dates = [];\n        let cur_date = null;\n\n        while (cur_date === null || cur_date < this.gantt_end) {\n            if (!cur_date) {\n                cur_date = date_utils.clone(this.gantt_start);\n            } else {\n                if (this.view_is(VIEW_MODE.YEAR)) {\n                    cur_date = date_utils.add(cur_date, 1, 'year');\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\n                    cur_date = date_utils.add(cur_date, 1, 'month');\n                } else {\n                    cur_date = date_utils.add(\n                        cur_date,\n                        this.options.step,\n                        'hour'\n                    );\n                }\n            }\n            this.dates.push(cur_date);\n        }\n    }\n\n    bind_events() {\n        this.bind_grid_click();\n        this.bind_bar_events();\n    }\n\n    render() {\n        this.clear();\n        this.setup_layers();\n        this.make_grid();\n        this.make_dates();\n        this.make_bars();\n        this.make_arrows();\n        this.map_arrows_on_bars();\n        this.set_width();\n        this.set_scroll_position();\n    }\n\n    setup_layers() {\n        this.layers = {};\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\n        // make group layers\n        for (let layer of layers) {\n            this.layers[layer] = createSVG('g', {\n                class: layer,\n                append_to: this.$svg,\n            });\n        }\n    }\n\n    make_grid() {\n        this.make_grid_background();\n        this.make_grid_rows();\n        this.make_grid_header();\n        this.make_grid_ticks();\n        this.make_grid_highlights();\n    }\n\n    make_grid_background() {\n        const grid_width = this.dates.length * this.options.column_width;\n        const grid_height =\n            this.options.header_height +\n            this.options.padding +\n            (this.options.bar_height + this.options.padding) *\n                this.tasks.length;\n\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: grid_width,\n            height: grid_height,\n            class: 'grid-background',\n            append_to: this.layers.grid,\n        });\n\n        $.attr(this.$svg, {\n            height: grid_height + this.options.padding + 100,\n            width: '100%',\n        });\n    }\n\n    make_grid_rows() {\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\n\n        const row_width = this.dates.length * this.options.column_width;\n        const row_height = this.options.bar_height + this.options.padding;\n\n        let row_y = this.options.header_height + this.options.padding / 2;\n\n        for (let task of this.tasks) {\n            createSVG('rect', {\n                x: 0,\n                y: row_y,\n                width: row_width,\n                height: row_height,\n                class: 'grid-row',\n                append_to: rows_layer,\n            });\n\n            createSVG('line', {\n                x1: 0,\n                y1: row_y + row_height,\n                x2: row_width,\n                y2: row_y + row_height,\n                class: 'row-line',\n                append_to: lines_layer,\n            });\n\n            row_y += this.options.bar_height + this.options.padding;\n        }\n    }\n\n    make_grid_header() {\n        const header_width = this.dates.length * this.options.column_width;\n        const header_height = this.options.header_height + 10;\n        createSVG('rect', {\n            x: 0,\n            y: 0,\n            width: header_width,\n            height: header_height,\n            class: 'grid-header',\n            append_to: this.layers.grid,\n        });\n    }\n\n    make_grid_ticks() {\n        let tick_x = 0;\n        let tick_y = this.options.header_height + this.options.padding / 2;\n        let tick_height =\n            (this.options.bar_height + this.options.padding) *\n            this.tasks.length;\n\n        for (let date of this.dates) {\n            let tick_class = 'tick';\n            // thick tick for monday\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\n                tick_class += ' thick';\n            }\n            // thick tick for first week\n            if (\n                this.view_is(VIEW_MODE.WEEK) &&\n                date.getDate() >= 1 &&\n                date.getDate() < 8\n            ) {\n                tick_class += ' thick';\n            }\n            // thick ticks for quarters\n            if (\n                this.view_is(VIEW_MODE.MONTH) &&\n                (date.getMonth() + 1) % 3 === 0\n            ) {\n                tick_class += ' thick';\n            }\n\n            createSVG('path', {\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\n                class: tick_class,\n                append_to: this.layers.grid,\n            });\n\n            if (this.view_is(VIEW_MODE.MONTH)) {\n                tick_x +=\n                    (date_utils.get_days_in_month(date) *\n                        this.options.column_width) /\n                    30;\n            } else {\n                tick_x += this.options.column_width;\n            }\n        }\n    }\n\n    make_grid_highlights() {\n        // highlight today's date\n        if (this.view_is(VIEW_MODE.DAY)) {\n            const x =\n                (date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\n                    this.options.step) *\n                this.options.column_width;\n            const y = 0;\n\n            const width = this.options.column_width;\n            const height =\n                (this.options.bar_height + this.options.padding) *\n                    this.tasks.length +\n                this.options.header_height +\n                this.options.padding / 2;\n\n            createSVG('rect', {\n                x,\n                y,\n                width,\n                height,\n                class: 'today-highlight',\n                append_to: this.layers.grid,\n            });\n        }\n    }\n\n    make_dates() {\n        for (let date of this.get_dates_to_draw()) {\n            createSVG('text', {\n                x: date.lower_x,\n                y: date.lower_y,\n                innerHTML: date.lower_text,\n                class: 'lower-text',\n                append_to: this.layers.date,\n            });\n\n            if (date.upper_text) {\n                const $upper_text = createSVG('text', {\n                    x: date.upper_x,\n                    y: date.upper_y,\n                    innerHTML: date.upper_text,\n                    class: 'upper-text',\n                    append_to: this.layers.date,\n                });\n\n                // remove out-of-bound dates\n                if (\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\n                ) {\n                    $upper_text.remove();\n                }\n            }\n        }\n    }\n\n    get_dates_to_draw() {\n        let last_date = null;\n        const dates = this.dates.map((date, i) => {\n            const d = this.get_date_info(date, last_date, i);\n            last_date = date;\n            return d;\n        });\n        return dates;\n    }\n\n    get_date_info(date, last_date, i) {\n        if (!last_date) {\n            last_date = date_utils.add(date, 1, 'year');\n        }\n        const date_text = {\n            'Quarter Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            'Half Day_lower': date_utils.format(\n                date,\n                'HH',\n                this.options.language\n            ),\n            Day_lower:\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Week_lower:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : date_utils.format(date, 'D', this.options.language),\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\n            'Quarter Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date_utils.format(date, 'D MMM', this.options.language)\n                    : '',\n            'Half Day_upper':\n                date.getDate() !== last_date.getDate()\n                    ? date.getMonth() !== last_date.getMonth()\n                        ? date_utils.format(\n                              date,\n                              'D MMM',\n                              this.options.language\n                          )\n                        : date_utils.format(date, 'D', this.options.language)\n                    : '',\n            Day_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Week_upper:\n                date.getMonth() !== last_date.getMonth()\n                    ? date_utils.format(date, 'MMMM', this.options.language)\n                    : '',\n            Month_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n            Year_upper:\n                date.getFullYear() !== last_date.getFullYear()\n                    ? date_utils.format(date, 'YYYY', this.options.language)\n                    : '',\n        };\n\n        const base_pos = {\n            x: i * this.options.column_width,\n            lower_y: this.options.header_height,\n            upper_y: this.options.header_height - 25,\n        };\n\n        const x_pos = {\n            'Quarter Day_lower': (this.options.column_width * 4) / 2,\n            'Quarter Day_upper': 0,\n            'Half Day_lower': (this.options.column_width * 2) / 2,\n            'Half Day_upper': 0,\n            Day_lower: this.options.column_width / 2,\n            Day_upper: (this.options.column_width * 30) / 2,\n            Week_lower: 0,\n            Week_upper: (this.options.column_width * 4) / 2,\n            Month_lower: this.options.column_width / 2,\n            Month_upper: (this.options.column_width * 12) / 2,\n            Year_lower: this.options.column_width / 2,\n            Year_upper: (this.options.column_width * 30) / 2,\n        };\n\n        return {\n            upper_text: date_text[`${this.options.view_mode}_upper`],\n            lower_text: date_text[`${this.options.view_mode}_lower`],\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\n            upper_y: base_pos.upper_y,\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\n            lower_y: base_pos.lower_y,\n        };\n    }\n\n    make_bars() {\n        this.bars = this.tasks.map((task) => {\n            const bar = new Bar(this, task);\n            this.layers.bar.appendChild(bar.group);\n            return bar;\n        });\n    }\n\n    make_arrows() {\n        this.arrows = [];\n        for (let task of this.tasks) {\n            let arrows = [];\n            arrows = task.dependencies\n                .map((task_id) => {\n                    const dependency = this.get_task(task_id);\n                    if (!dependency) return;\n                    const arrow = new Arrow(\n                        this,\n                        this.bars[dependency._index], // from_task\n                        this.bars[task._index] // to_task\n                    );\n                    this.layers.arrow.appendChild(arrow.element);\n                    return arrow;\n                })\n                .filter(Boolean); // filter falsy values\n            this.arrows = this.arrows.concat(arrows);\n        }\n    }\n\n    map_arrows_on_bars() {\n        for (let bar of this.bars) {\n            bar.arrows = this.arrows.filter((arrow) => {\n                return (\n                    arrow.from_task.task.id === bar.task.id ||\n                    arrow.to_task.task.id === bar.task.id\n                );\n            });\n        }\n    }\n\n    set_width() {\n        const cur_width = this.$svg.getBoundingClientRect().width;\n        const actual_width = this.$svg\n            .querySelector('.grid .grid-row')\n            .getAttribute('width');\n        if (cur_width < actual_width) {\n            this.$svg.setAttribute('width', actual_width);\n        }\n    }\n\n    set_scroll_position() {\n        const parent_element = this.$svg.parentElement;\n        if (!parent_element) return;\n\n        const hours_before_first_task = date_utils.diff(\n            this.get_oldest_starting_date(),\n            this.gantt_start,\n            'hour'\n        );\n\n        const scroll_pos =\n            (hours_before_first_task / this.options.step) *\n                this.options.column_width -\n            this.options.column_width;\n\n        parent_element.scrollLeft = scroll_pos;\n    }\n\n    bind_grid_click() {\n        $.on(\n            this.$svg,\n            this.options.popup_trigger,\n            '.grid-row, .grid-header',\n            () => {\n                this.unselect_all();\n                this.hide_popup();\n            }\n        );\n    }\n\n    bind_bar_events() {\n        let is_dragging = false;\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing_left = false;\n        let is_resizing_right = false;\n        let parent_bar_id = null;\n        let bars = []; // instanceof Bar\n        this.bar_being_dragged = null;\n\n        function action_in_progress() {\n            return is_dragging || is_resizing_left || is_resizing_right;\n        }\n\n        $.on(this.$svg, 'mousedown', '.bar-wrapper, .handle', (e, element) => {\n            const bar_wrapper = $.closest('.bar-wrapper', element);\n\n            if (element.classList.contains('left')) {\n                is_resizing_left = true;\n            } else if (element.classList.contains('right')) {\n                is_resizing_right = true;\n            } else if (element.classList.contains('bar-wrapper')) {\n                is_dragging = true;\n            }\n\n            bar_wrapper.classList.add('active');\n\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            parent_bar_id = bar_wrapper.getAttribute('data-id');\n            const ids = [\n                parent_bar_id,\n                ...this.get_all_dependent_tasks(parent_bar_id),\n            ];\n            bars = ids.map((id) => this.get_bar(id));\n\n            this.bar_being_dragged = parent_bar_id;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.ox = $bar.getX();\n                $bar.oy = $bar.getY();\n                $bar.owidth = $bar.getWidth();\n                $bar.finaldx = 0;\n            });\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!action_in_progress()) return;\n            const dx = e.offsetX - x_on_start;\n            const dy = e.offsetY - y_on_start;\n\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                $bar.finaldx = this.get_snap_position(dx);\n                this.hide_popup();\n                if (is_resizing_left) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                            width: $bar.owidth - $bar.finaldx,\n                        });\n                    } else {\n                        bar.update_bar_position({\n                            x: $bar.ox + $bar.finaldx,\n                        });\n                    }\n                } else if (is_resizing_right) {\n                    if (parent_bar_id === bar.task.id) {\n                        bar.update_bar_position({\n                            width: $bar.owidth + $bar.finaldx,\n                        });\n                    }\n                } else if (is_dragging) {\n                    bar.update_bar_position({ x: $bar.ox + $bar.finaldx });\n                }\n            });\n        });\n\n        document.addEventListener('mouseup', (e) => {\n            if (is_dragging || is_resizing_left || is_resizing_right) {\n                bars.forEach((bar) => bar.group.classList.remove('active'));\n            }\n\n            is_dragging = false;\n            is_resizing_left = false;\n            is_resizing_right = false;\n        });\n\n        $.on(this.$svg, 'mouseup', (e) => {\n            this.bar_being_dragged = null;\n            bars.forEach((bar) => {\n                const $bar = bar.$bar;\n                if (!$bar.finaldx) return;\n                bar.date_changed();\n                bar.set_action_completed();\n            });\n        });\n\n        this.bind_bar_progress();\n    }\n\n    bind_bar_progress() {\n        let x_on_start = 0;\n        let y_on_start = 0;\n        let is_resizing = null;\n        let bar = null;\n        let $bar_progress = null;\n        let $bar = null;\n\n        $.on(this.$svg, 'mousedown', '.handle.progress', (e, handle) => {\n            is_resizing = true;\n            x_on_start = e.offsetX;\n            y_on_start = e.offsetY;\n\n            const $bar_wrapper = $.closest('.bar-wrapper', handle);\n            const id = $bar_wrapper.getAttribute('data-id');\n            bar = this.get_bar(id);\n\n            $bar_progress = bar.$bar_progress;\n            $bar = bar.$bar;\n\n            $bar_progress.finaldx = 0;\n            $bar_progress.owidth = $bar_progress.getWidth();\n            $bar_progress.min_dx = -$bar_progress.getWidth();\n            $bar_progress.max_dx = $bar.getWidth() - $bar_progress.getWidth();\n        });\n\n        $.on(this.$svg, 'mousemove', (e) => {\n            if (!is_resizing) return;\n            let dx = e.offsetX - x_on_start;\n            let dy = e.offsetY - y_on_start;\n\n            if (dx > $bar_progress.max_dx) {\n                dx = $bar_progress.max_dx;\n            }\n            if (dx < $bar_progress.min_dx) {\n                dx = $bar_progress.min_dx;\n            }\n\n            const $handle = bar.$handle_progress;\n            $.attr($bar_progress, 'width', $bar_progress.owidth + dx);\n            $.attr($handle, 'points', bar.get_progress_polygon_points());\n            $bar_progress.finaldx = dx;\n        });\n\n        $.on(this.$svg, 'mouseup', () => {\n            is_resizing = false;\n            if (!($bar_progress && $bar_progress.finaldx)) return;\n            bar.progress_changed();\n            bar.set_action_completed();\n        });\n    }\n\n    get_all_dependent_tasks(task_id) {\n        let out = [];\n        let to_process = [task_id];\n        while (to_process.length) {\n            const deps = to_process.reduce((acc, curr) => {\n                acc = acc.concat(this.dependency_map[curr]);\n                return acc;\n            }, []);\n\n            out = out.concat(deps);\n            to_process = deps.filter((d) => !to_process.includes(d));\n        }\n\n        return out.filter(Boolean);\n    }\n\n    get_snap_position(dx) {\n        let odx = dx,\n            rem,\n            position;\n\n        if (this.view_is(VIEW_MODE.WEEK)) {\n            rem = dx % (this.options.column_width / 7);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 14\n                    ? 0\n                    : this.options.column_width / 7);\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\n            rem = dx % (this.options.column_width / 30);\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 60\n                    ? 0\n                    : this.options.column_width / 30);\n        } else {\n            rem = dx % this.options.column_width;\n            position =\n                odx -\n                rem +\n                (rem < this.options.column_width / 2\n                    ? 0\n                    : this.options.column_width);\n        }\n        return position;\n    }\n\n    unselect_all() {\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach((el) => {\n            el.classList.remove('active');\n        });\n    }\n\n    view_is(modes) {\n        if (typeof modes === 'string') {\n            return this.options.view_mode === modes;\n        }\n\n        if (Array.isArray(modes)) {\n            return modes.some((mode) => this.options.view_mode === mode);\n        }\n\n        return false;\n    }\n\n    get_task(id) {\n        return this.tasks.find((task) => {\n            return task.id === id;\n        });\n    }\n\n    get_bar(id) {\n        return this.bars.find((bar) => {\n            return bar.task.id === id;\n        });\n    }\n\n    show_popup(options) {\n        if (!this.popup) {\n            this.popup = new Popup(\n                this.popup_wrapper,\n                this.options.custom_popup_html\n            );\n        }\n        this.popup.show(options);\n    }\n\n    hide_popup() {\n        this.popup && this.popup.hide();\n    }\n\n    trigger_event(event, args) {\n        if (this.options['on_' + event]) {\n            this.options['on_' + event].apply(null, args);\n        }\n    }\n\n    /**\n     * Gets the oldest starting date from the list of tasks\n     *\n     * @returns Date\n     * @memberof Gantt\n     */\n    get_oldest_starting_date() {\n        return this.tasks\n            .map((task) => task._start)\n            .reduce((prev_date, cur_date) =>\n                cur_date <= prev_date ? cur_date : prev_date\n            );\n    }\n\n    /**\n     * Clear all elements from the parent svg element\n     *\n     * @memberof Gantt\n     */\n    clear() {\n        this.$svg.innerHTML = '';\n    }\n}\n\nGantt.VIEW_MODE = VIEW_MODE;\n\nfunction generate_id(task) {\n    return task.name + '_' + Math.random().toString(36).slice(2, 12);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}