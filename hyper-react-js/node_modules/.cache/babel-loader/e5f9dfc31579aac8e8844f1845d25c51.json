{"ast":null,"code":"import { get as r, set as i } from \"react-hook-form\";\n\nvar e = function e(i, _e, t) {\n  if (i && \"reportValidity\" in i) {\n    var f = r(t, _e);\n    i.setCustomValidity(f && f.message || \"\"), i.reportValidity();\n  }\n},\n    t = function t(r, i) {\n  var t = function t(_t) {\n    var f = i.fields[_t];\n    f && f.ref && \"reportValidity\" in f.ref ? e(f.ref, _t, r) : f.refs && f.refs.forEach(function (i) {\n      return e(i, _t, r);\n    });\n  };\n\n  for (var f in i.fields) {\n    t(f);\n  }\n},\n    f = function f(e, _f) {\n  _f.shouldUseNativeValidation && t(e, _f);\n  var o = {};\n\n  for (var a in e) {\n    var n = r(_f.fields, a);\n    i(o, a, Object.assign(e[a], {\n      ref: n && n.ref\n    }));\n  }\n\n  return o;\n};\n\nexport { f as toNestError, t as validateFieldsNatively };","map":{"version":3,"sources":["../src/validateFieldsNatively.ts","../src/toNestError.ts"],"names":["setCustomValidity","ref","fieldPath","errors","error","get","message","reportValidity","validateFieldsNatively","options","fields","field","refs","forEach","toNestError","shouldUseNativeValidation","fieldErrors","path","set","Object","assign"],"mappings":";;AAIA,IAAMA,CAAAA,GAAoB,WAACC,CAAD,EAAWC,EAAX,EAA8BC,CAA9B,EAA8BA;EACtD,IAAIF,CAAAA,IAAO,oBAAoBA,CAA/B,EAAoC;IAClC,IAAMG,CAAAA,GAAQC,CAAAA,CAAIF,CAAJE,EAAYH,EAAZG,CAAd;IACAJ,CAAAA,CAAID,iBAAJC,CAAuBG,CAAAA,IAASA,CAAAA,CAAME,OAAfF,IAA2B,EAAlDH,GAEAA,CAAAA,CAAIM,cAAJN,EAFAA;EAEIM;AAAAA,CALR;AAAA,IAUaC,CAAAA,GAAyB,WACpCL,CADoC,EAEpCM,CAFoC,EAEpCA;EAAAA,IAAAA,CAAAA,GAAAA,WAIWP,EAJXO,EAIWP;IACT,IAAMS,CAAAA,GAAQF,CAAAA,CAAQC,MAARD,CAAeP,EAAfO,CAAd;IACIE,CAAAA,IAASA,CAAAA,CAAMV,GAAfU,IAAsB,oBAAoBA,CAAAA,CAAMV,GAAhDU,GACFX,CAAAA,CAAkBW,CAAAA,CAAMV,GAAxBD,EAA6BE,EAA7BF,EAAwCG,CAAxCH,CADEW,GAEOA,CAAAA,CAAMC,IAAND,IACTA,CAAAA,CAAMC,IAAND,CAAWE,OAAXF,CAAmB,UAACV,CAAD,EAACA;MAAAA,OAA0BD,CAAAA,CAAkBC,CAAlBD,EAAuBE,EAAvBF,EAAkCG,CAAlCH,CAA1BC;IAA4DE,CAAhFQ,CAHEA;EAG8ER,CATpFM;;EAIA,KAAK,IAAMP,CAAX,IAAwBO,CAAAA,CAAQC,MAAhC;IAAgCA,CAAAA,CAArBR,CAAqBQ,CAAAA;EAAhC;AAAWR,CAhBb;AAAA,ICKaY,CAAAA,GAAc,WACzBX,CADyB,EAEzBM,EAFyB,EAEzBA;EAEAA,EAAAA,CAAQM,yBAARN,IAAqCD,CAAAA,CAAuBL,CAAvBK,EAA+BC,EAA/BD,CAArCC;EAEA,IAAMO,CAAAA,GAAc,EAApB;;EACA,KAAK,IAAMC,CAAX,IAAmBd,CAAnB,EAA2B;IACzB,IAAMQ,CAAAA,GAAQN,CAAAA,CAAII,EAAAA,CAAQC,MAAZL,EAAoBY,CAApBZ,CAAd;IAEAa,CAAAA,CACEF,CADFE,EAEED,CAFFC,EAGEC,MAAAA,CAAOC,MAAPD,CAAchB,CAAAA,CAAOc,CAAPd,CAAdgB,EAA4B;MAAElB,GAAAA,EAAKU,CAAAA,IAASA,CAAAA,CAAMV;IAAtB,CAA5BkB,CAHFD,CAAAA;EAOF;;EAAA,OAAOF,CAAP;AAAOA,CDtBT;;ACsBSA,SAAAA,CAAAA,IAAAA,WAAAA,EAAAA,CAAAA,IAAAA,sBAAAA","sourcesContent":["import {\n  get, FieldError, ResolverOptions, Ref, FieldErrors\n} from 'react-hook-form';\n\nconst setCustomValidity = (ref: Ref, fieldPath: string, errors: FieldErrors) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n\n\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors)\n    } else if (field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) => setCustomValidity(ref, fieldPath, errors))\n    }\n  }\n};\n","import {\n  set,\n  get,\n  FieldErrors,\n  Field,\n  ResolverOptions,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestError = <TFieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n\n    set(\n      fieldErrors,\n      path,\n      Object.assign(errors[path], { ref: field && field.ref }),\n    );\n  }\n\n  return fieldErrors;\n};\n"]},"metadata":{},"sourceType":"module"}