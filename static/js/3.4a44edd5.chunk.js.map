{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getEventValue.ts","../../src/logic/isNameInFieldArray.ts","../../src/logic/getNodeParentName.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/logic/getProxyFormState.ts","../../src/useFormContext.tsx","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/useSubscribe.ts","../../src/utils/isString.ts","../../src/logic/generateWatchOutput.ts","../../src/utils/isFunction.ts","../../src/utils/objectHasFunction.ts","../../src/controller.tsx","../../src/logic/appendErrors.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/focusFieldBy.ts","../../src/logic/isWatched.ts","../../src/utils/isWeb.ts","../../src/utils/cloneObject.ts","../../src/utils/unset.ts","../../src/utils/createSubject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/live.ts","../../src/logic/getDirtyFields.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getResolverOptions.ts","../../src/utils/isRegex.ts","../../src/logic/getRuleValue.ts","../../src/logic/hasValidation.ts","../../src/logic/schemaErrorLookup.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts","../node_modules/react-bootstrap/esm/InputGroupContext.js","../node_modules/react-bootstrap/esm/InputGroup.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","element","type","Date","isObjectType","isNullOrUndefined","Array","isArray","isDateObject","event","isObject","target","isCheckBoxInput","checked","names","name","has","substring","search","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","result","compact","split","reduce","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","createContext","formState","_proxyFormState","localProxyFormState","isRoot","Object","defineProperty","get","_key","keys","length","formStateData","isEmptyObject","find","useSubscribe","props","_props","useRef","current","useEffect","subscription","disabled","subject","subscribe","next","callback","unsubscribe","tearDown","_names","formValues","isGlobal","isString","watch","add","map","fieldName","watchAll","data","isFunction","validateAllFieldCriteria","errors","message","types","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","focusFieldBy","fields","fieldsNames","field","_f","currentField","ref","focus","refs","isBlurEvent","some","watchName","startsWith","slice","window","HTMLElement","document","cloneObject","copy","Set","isWeb","Blob","FileList","unset","previousObjRef","updatePath","childObject","baseGet","k","objectRef","currentPaths","currentPathsLength","item","createSubject","_observers","observers","observer","push","o","deepEqual","object1","object2","isPrimitive","getTime","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","owner","ownerDocument","defaultView","isRadioInput","isHTMLElement","isConnected","markFieldsDirty","isParentNodeArray","objectHasFunction","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","defaultValues","defaultResult","isValid","validResult","options","values","option","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selectedOptions","isCheckBox","getCheckboxValue","getFieldValueAs","_fields","criteriaMode","shouldUseNativeValidation","RegExp","rule","isRegex","source","mount","required","min","max","maxLength","minLength","pattern","validate","schemaErrorLookup","join","foundError","pop","isTouched","isSubmitted","reValidateMode","isValidElement","getValidateError","isBoolean","validationData","inputValue","inputRef","setCustomValidity","reportValidity","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","_options","_formState","isDirty","isValidating","dirtyFields","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_defaultValues","_formValues","shouldUnregister","_stateFlags","action","unMount","array","timer","validateFields","_subjects","state","validationModeBeforeSubmit","getValidationModes","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","debounce","wait","clearTimeout","setTimeout","_updateValid","shouldSkipRender","resolver","_executeSchema","executeBuildInValidation","_updateFieldArray","method","shouldSetValues","shouldUpdateFieldsAndState","fieldValues","argA","argB","unsetEmptyArray","getDirtyFields","_getDirty","updateErrors","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","isFieldDirty","output","isPreviousFieldTouched","isPreviousFormDirty","isPreviousFieldDirty","shouldRenderByError","fieldState","previousFieldError","shouldUpdateValid","delayError","updatedFormState","v","context","executeSchemaAndUpdateState","shouldOnlyCheckValid","valid","fieldReference","validateField","fieldError","_removeUnmounted","live","unregister","getValues","_getWatch","generateWatchOutput","_getFieldArray","forEach","selectRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","isFieldArray","cloneValue","onChange","getEventValue","shouldSkipValidation","hasValidation","deps","skipValidation","watched","onBlur","previousErrorLookupResult","errorLookupResult","fieldNames","convertToArrayPayload","all","shouldFocus","getFieldState","invalid","clearErrors","inputName","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepDefaultValue","keepIsValid","register","disabledIsDefined","getRuleValue","fieldRef","querySelectorAll","radioOrCheckbox","isNameInFieldArray","handleSubmit","onValid","onInvalid","e","preventDefault","persist","hasNoPromiseError","resetField","reset","keepStateOptions","updatedValues","cloneUpdatedValues","keepDefaultValues","keepValues","keepDirtyValues","closest","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","shouldSelect","select","control","useForm","_formControl","useState","updateFormState","useCallback","getProxyFormState","React","displayName","InputGroupText","createWithBsPrefix","Component","InputGroup","bsPrefix","size","className","as","useBootstrapPrefix","contextValue","useMemo","_jsx","InputGroupContext","Provider","children","classNames","assign","Text","Radio","FormCheckInput","Checkbox"],"mappings":"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","file":"static/js/3.4a44edd5.chunk.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(obj: T, path: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(obj)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path as keyof T])\n      ? defaultValue\n      : obj[path as keyof T]\n    : result;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {} as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (_proxyFormState[_key] !== VALIDATION_MODE.all) {\n          _proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(HookFormContext) as unknown as UseFormReturn<TFieldValues>;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useFrom methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <TFieldValues extends FieldValues, TContext = any>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {props.children}\n    </HookFormContext.Provider>\n  );\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import React from 'react';\n\nimport { Subject, Subscription } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  callback: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const tearDown = (subscription: Subscription | false) => {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n\n    const subscription =\n      !props.disabled &&\n      _props.current.subject.subscribe({\n        next: _props.current.callback,\n      });\n\n    return () => tearDown(subscription);\n  }, [props.disabled]);\n}\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { FieldValues, InternalFieldName, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default (\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n) => {\n  const isArray = Array.isArray(names);\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names as InternalFieldName);\n    return get(formValues, names as InternalFieldName);\n  }\n\n  if (isArray) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName as InternalFieldName),\n        get(formValues, fieldName as InternalFieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n  return formValues;\n};\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(currentField)) {\n        focusFieldBy(currentField, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isFunction from './isFunction';\nimport isObject from './isObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      if (isFunction(data[key])) {\n        copy = data;\n        break;\n      }\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter((data) => !isUndefined(data)).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default function createSubject<T>(): Subject<T> {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is HTMLElement => {\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  const ElementClass =\n    owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement;\n  return value instanceof ElementClass;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<U>(data: U, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: any,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field, NativeFieldValue } from '../types';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === '' || isNullOrUndefined(value)\n      ? NaN\n      : +value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? undefined\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup(\n  errors: FieldErrors,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  InternalFieldErrors,\n  Message,\n  NativeFieldValue,\n} from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends NativeFieldValue>(\n  field: Field,\n  inputValue: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || +inputValue;\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  Ref,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  };\n  let _fields = {};\n  let _defaultValues = cloneObject(_options.defaultValues) || {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _stateFlags = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  let validateFields: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = window.setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldSkipRender?: boolean) => {\n    let isValid = false;\n\n    if (_proxyFormState.isValid) {\n      isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuildInValidation(_fields, true);\n\n      if (!shouldSkipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n\n    return isValid;\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _stateFlags.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        _proxyFormState.errors &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _stateFlags.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let isFieldDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (_proxyFormState.isDirty) {\n      const isPreviousFormDirty = _formState.isDirty;\n\n      _formState.isDirty = output.isDirty = _getDirty();\n      isFieldDirty = isPreviousFormDirty !== output.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && (!isBlurEvent || shouldDirty)) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldPristine = deepEqual(\n        get(_defaultValues, name),\n        fieldValue,\n      );\n\n      isCurrentFieldPristine\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields as TFieldValues, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      isFieldDirty =\n        isFieldDirty ||\n        isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    if (isBlurEvent && !isPreviousFieldTouched) {\n      set(_formState.touchedFields as TFieldValues, name, isBlurEvent);\n      output.touchedFields = _formState.touchedFields;\n      isFieldDirty =\n        isFieldDirty ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isBlurEvent);\n    }\n\n    isFieldDirty && shouldRender && _subjects.state.next(output);\n\n    return isFieldDirty ? output : {};\n  };\n\n  const shouldRenderByError = async (\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    validateFields[name]--;\n\n    if (\n      _proxyFormState.isValidating &&\n      !Object.values(validateFields).some((v) => v)\n    ) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      validateFields = {};\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) =>\n    _options.resolver\n      ? await _options.resolver(\n          { ..._formValues } as TFieldValues,\n          _options.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            _options.criteriaMode,\n            _options.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult<TFieldValues>);\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors as FieldErrors<TFieldValues>;\n    }\n\n    return errors;\n  };\n\n  const executeBuildInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f: fieldReference, ...fieldValue } = field;\n\n        if (fieldReference) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, fieldReference.name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          );\n\n          if (fieldError[fieldReference.name]) {\n            context.valid = false;\n\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldOnlyCheckValid) {\n            fieldError[fieldReference.name]\n              ? set(\n                  _formState.errors,\n                  fieldReference.name,\n                  fieldError[fieldReference.name],\n                )\n              : unset(_formState.errors, fieldReference.name);\n          }\n        }\n\n        fieldValue &&\n          (await executeBuildInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_stateFlags.mount\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(names)\n        ? { [names]: defaultValue }\n        : defaultValue),\n    };\n\n    return generateWatchOutput(names, _names, fieldValues, isGlobal);\n  };\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _stateFlags.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isWeb && isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    !checkboxRef.disabled &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.watch.next({\n              name,\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    const target = event.target;\n    let name = target.name;\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = target.type\n        ? getFieldValue(field._f)\n        : getEventValue(event);\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type: event.type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({});\n\n      validateFields[name] = validateFields[name] ? +1 : 1;\n\n      _subjects.state.next({\n        isValidating: true,\n      });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n        const previousErrorLookupResult = schemaErrorLookup(\n          _formState.errors,\n          _fields,\n          name,\n        );\n        const errorLookupResult = schemaErrorLookup(\n          errors,\n          _fields,\n          previousErrorLookupResult.name || name,\n        );\n\n        error = errorLookupResult.error;\n        name = errorLookupResult.name;\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name),\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      field._f.deps &&\n        trigger(\n          field._f.deps as FieldPath<TFieldValues> | FieldPath<TFieldValues>[],\n        );\n\n      shouldRenderByError(name, isValid, error, fieldState);\n    }\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuildInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuildInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver ? { isValid } : {}),\n      errors: _formState.errors,\n      isValidating: false,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ...(_stateFlags.mount ? _formValues : {}),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {} as FieldErrors<TFieldValues>);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(name)\n      ? _subjects.watch.subscribe({\n          next: (info) =>\n            name(\n              _getWatch(undefined, defaultValue as DeepPartial<TFieldValues>),\n              info as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue as DeepPartial<TFieldValues>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (get(_fields, fieldName)) {\n        if (!options.keepValue) {\n          unset(_fields, fieldName);\n          unset(_formValues, fieldName);\n        }\n\n        !options.keepError && unset(_formState.errors, fieldName);\n        !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n        !options.keepTouched && unset(_formState.touchedFields, fieldName);\n        !_options.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, fieldName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    field\n      ? disabledIsDefined &&\n        set(\n          _formValues,\n          name,\n          options.disabled\n            ? undefined\n            : get(_formValues, name, getFieldValue(field._f)),\n        )\n      : updateValidAndValue(name, true, options.value);\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.shouldUseNativeValidation\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(!!Array.isArray(get(_defaultValues, name))\n                        ? [{}]\n                        : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _stateFlags.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (_options.resolver) {\n          const { errors, values } = await _executeSchema();\n          _formState.errors = errors as FieldErrors<TFieldValues>;\n          fieldValues = values;\n        } else {\n          await executeBuildInValidation(_fields);\n        }\n\n        if (isEmptyObject(_formState.errors)) {\n          _subjects.state.next({\n            errors: {} as FieldErrors<TFieldValues>,\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          if (onInvalid) {\n            await onInvalid({ ..._formState.errors }, e);\n          }\n\n          _options.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, get(_defaultValues, name));\n      } else {\n        setValue(name, options.defaultValue);\n        set(_defaultValues, name, options.defaultValue);\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, get(_defaultValues, name))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const values =\n      formValues && !isEmptyObject(formValues)\n        ? cloneUpdatedValues\n        : _defaultValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              try {\n                isHTMLElement(fieldReference) &&\n                  fieldReference.closest('form')!.reset();\n                break;\n              } catch {}\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneUpdatedValues;\n\n      _subjects.array.next({\n        values,\n      });\n\n      _subjects.watch.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _stateFlags.mount =\n      !_proxyFormState.isValid || !!keepStateOptions.keepIsValid;\n\n    _stateFlags.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.isDirty\n          : !!(\n              keepStateOptions.keepDefaultValues &&\n              !deepEqual(formValues, _defaultValues)\n            ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields:\n        keepStateOptions.keepDirty || keepStateOptions.keepDirtyValues\n          ? _formState.dirtyFields\n          : keepStateOptions.keepDefaultValues && formValues\n          ? getDirtyFields(_defaultValues, formValues)\n          : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : ({} as FieldNamesMarkedBoolean<TFieldValues>),\n      errors: keepStateOptions.keepErrors\n        ? _formState.errors\n        : ({} as FieldErrors<TFieldValues>),\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name)._f;\n    const fieldRef = field.refs ? field.refs[0] : field.ref;\n    options.shouldSelect ? fieldRef.select() : fieldRef.focus();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _getFieldArray,\n      _subjects,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _stateFlags() {\n        return _stateFlags;\n      },\n      set _stateFlags(value) {\n        _stateFlags = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport {\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldValues,\n  FormState,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to mange the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/api/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {} as FieldNamesMarkedBoolean<TFieldValues>,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {} as FieldErrors<TFieldValues>,\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._options = props;\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  const callback = React.useCallback(\n    (value: FieldValues) => {\n      if (shouldRenderFormState(value, control._proxyFormState, true)) {\n        control._formState = {\n          ...control._formState,\n          ...value,\n        };\n\n        updateFormState({ ...control._formState });\n      }\n    },\n    [control],\n  );\n\n  useSubscribe({\n    subject: control._subjects.state,\n    callback,\n  });\n\n  React.useEffect(() => {\n    if (!control._stateFlags.mount) {\n      control._proxyFormState.isValid && control._updateValid();\n      control._stateFlags.mount = true;\n    }\n    if (control._stateFlags.watch) {\n      control._stateFlags.watch = false;\n      control._subjects.state.next({});\n    }\n    control._removeUnmounted();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n","import * as React from 'react';\nconst context = /*#__PURE__*/React.createContext(null);\ncontext.displayName = 'InputGroupContext';\nexport default context;","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport FormCheckInput from './FormCheckInput';\nimport InputGroupContext from './InputGroupContext';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nconst InputGroupCheckbox = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"checkbox\",\n    ...props\n  })\n});\n\nconst InputGroupRadio = props => /*#__PURE__*/_jsx(InputGroupText, {\n  children: /*#__PURE__*/_jsx(FormCheckInput, {\n    type: \"radio\",\n    ...props\n  })\n});\n\n/**\n *\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nconst InputGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  hasValidation,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group'); // Intentionally an empty object. Used in detecting if a dropdown\n  // exists under an input group.\n\n  const contextValue = useMemo(() => ({}), []);\n  return /*#__PURE__*/_jsx(InputGroupContext.Provider, {\n    value: contextValue,\n    children: /*#__PURE__*/_jsx(Component, {\n      ref: ref,\n      ...props,\n      className: classNames(className, bsPrefix, size && `${bsPrefix}-${size}`, hasValidation && 'has-validation')\n    })\n  });\n});\nInputGroup.displayName = 'InputGroup';\nexport default Object.assign(InputGroup, {\n  Text: InputGroupText,\n  Radio: InputGroupRadio,\n  Checkbox: InputGroupCheckbox\n});"],"sourceRoot":""}